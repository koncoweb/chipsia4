// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: nMmABczlpYPv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: 38U0KJJ_izLvF0/component
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: u-J0rH0B-4/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: be4gyluQ_9OJzR/component
import Button from "../../Button"; // plasmic-import: z08NHQzGDufhl_/component
import Rating from "../../Rating"; // plasmic-import: JRf21XH4cTf7V-/component
import EmojiValueProps from "../../EmojiValueProps"; // plasmic-import: pVPTu88xjlQJ6D/component
import Value from "../../Value"; // plasmic-import: 3bRucgJCclHNht/component
import Footer from "../../Footer"; // plasmic-import: TjbIATQS4AqoQO/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: XZMu2sj2Xg/codeComponent

import { useScreenVariants as useScreenVariantsbvEuI4Yp87Tgs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BV_euI4yp87tgs/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chipsia.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicArticles.module.css"; // plasmic-import: nMmABczlpYPv/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: vIBh7hkedAKVLS/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: PS6DVWNrsATME2/icon
import PlaneIcon from "./icons/PlasmicIcon__Plane"; // plasmic-import: K0_Ms7xwxMqw9s/icon
import DocumentIcon from "./icons/PlasmicIcon__Document"; // plasmic-import: nmoxyqKZ1SSwmZ/icon
import LockIcon from "./icons/PlasmicIcon__Lock"; // plasmic-import: CO7fMjG8L3EKiN/icon
import MedalIcon from "./icons/PlasmicIcon__Medal"; // plasmic-import: rGAFqrIjwFkcZM/icon
import LeafIcon from "./icons/PlasmicIcon__Leaf"; // plasmic-import: sxhoIq9e99bhcn/icon
import MoneySvgrepoComsvgIcon from "./icons/PlasmicIcon__MoneySvgrepoComsvg"; // plasmic-import: ra_o6xwOHS/icon
import PeaceIcon from "./icons/PlasmicIcon__Peace"; // plasmic-import: X6eB28EOD3seMa/icon

createPlasmicElementProxy;

export type PlasmicArticles__VariantMembers = {};
export type PlasmicArticles__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticles__VariantsArgs;
export const PlasmicArticles__VariantProps = new Array<VariantPropType>();

export type PlasmicArticles__ArgsType = {
  container42?: React.ReactNode;
};
type ArgPropType = keyof PlasmicArticles__ArgsType;
export const PlasmicArticles__ArgProps = new Array<ArgPropType>("container42");

export type PlasmicArticles__OverridesType = {
  root?: p.Flex<"main">;
  navBar?: p.Flex<typeof NavBar>;
  h1?: p.Flex<"h1">;
  loadingboundaryartikel?: p.Flex<typeof LoadingBoundary>;
  productCard3?: p.Flex<typeof ProductCard>;
  article?: p.Flex<"article">;
  rating?: p.Flex<typeof Rating>;
  whybanner?: p.Flex<"section">;
  container42?: p.Flex<"div">;
  container5?: p.Flex<"div">;
  productCard4?: p.Flex<typeof ProductCard>;
  productCard5?: p.Flex<typeof ProductCard>;
  productCard6?: p.Flex<typeof ProductCard>;
  productCard7?: p.Flex<typeof ProductCard>;
  productCard8?: p.Flex<typeof ProductCard>;
  productCard9?: p.Flex<typeof ProductCard>;
  emojiValueProps?: p.Flex<typeof EmojiValueProps>;
  columns?: p.Flex<"div">;
  container433?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultArticlesProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticles__RenderFunc(props: {
  variants: PlasmicArticles__VariantsArgs;
  args: PlasmicArticles__ArgsType;
  overrides: PlasmicArticles__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "productCard3[].entryidvar",
        type: "private",
        variableType: "text"
      },
      {
        path: "productCard4.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard5.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard6.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard7.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard8.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard9.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const new$Queries = {
    queryAllArticlesContentfull: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "qf7bUhfT7FamL4uVQRVVad",
            opId: "7411043c-c320-41e3-bf42-a87d3982365e",
            userArgs: {},
            cacheKey: "plasmic.$.Bte0jWUkG.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbvEuI4Yp87Tgs()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicArticles.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicArticles.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicArticles.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicArticles.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicArticles.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicArticles.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicArticles.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicArticles.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicArticles.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <main
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <NavBar
          data-plasmic-name={"navBar"}
          data-plasmic-override={overrides.navBar}
          className={classNames("__wab_instance", sty.navBar)}
        />

        <section className={classNames(projectcss.all, sty.section__ukkM5)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jCpxF)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"News & Articles"}
            </h1>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sglks)}
          >
            <LoadingBoundary
              data-plasmic-name={"loadingboundaryartikel"}
              data-plasmic-override={overrides.loadingboundaryartikel}
              className={classNames(
                "__wab_instance",
                sty.loadingboundaryartikel
              )}
              loadingState={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uExiD
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "load latest articles & news... ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Loading...";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  )}
                </ph.DataCtxReader>
              }
            >
              <ph.DataCtxReader>
                {$ctx =>
                  (() => {
                    try {
                      return $queries.queryAllArticlesContentfull.data
                        .statusCode;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (
                        (() => {
                          try {
                            return $queries.queryAllArticlesContentfull.data
                              .response.items;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })() ?? []
                      ).map((currentItem, currentIndex) => (
                        <ProductCard
                          data-plasmic-name={"productCard3"}
                          data-plasmic-override={overrides.productCard3}
                          className={classNames(
                            "__wab_instance",
                            sty.productCard3
                          )}
                          img={(() => {
                            try {
                              return $queries.queryAllArticlesContentfull.data
                                .response.includes.Asset[currentIndex].fields
                                .file.url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "https://site-assets.plasmic.app/2ac568871cd64562b22f222fb9c568e6.jpg";
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          link={`/articles/${(() => {
                            try {
                              return currentItem.fields.slug;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}-${(() => {
                            try {
                              return currentItem.sys.id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}`}
                          onEntryidvarChange={p.generateStateOnChangeProp(
                            $state,
                            ["productCard3", currentIndex, "entryidvar"]
                          )}
                          rating={
                            <Rating
                              data-plasmic-name={"rating"}
                              data-plasmic-override={overrides.rating}
                              className={classNames(
                                "__wab_instance",
                                sty.rating
                              )}
                              rating={"four" as const}
                            />
                          }
                          tags={
                            <Button
                              colors={"lightGray" as const}
                              size={"small" as const}
                              submitsForm={true}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.fields.kategori;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Best Seller";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </Button>
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sXqLr
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "TEMPEH CHIPS      ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__g0IZj
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.fields.judul;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Healthy Vegan Tempeh Chips Original Indonesia";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h2>
                          <article
                            data-plasmic-name={"article"}
                            data-plasmic-override={overrides.article}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.article
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.fields.deskripsiSeo;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </article>
                        </ProductCard>
                      ))
                    : null
                }
              </ph.DataCtxReader>
            </LoadingBoundary>
          </p.Stack>
        </section>
        {true ? (
          <section className={classNames(projectcss.all, sty.section__abcku)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___18R4X)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zyRo9)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5Hb9X)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__fvqw
                    )}
                  >
                    {
                      "Chipsia is Committed to Becoming the Best Traditional Indonesian snack Exporter "
                    }
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p8OQ
                    )}
                  >
                    {
                      "Chipsia Are Trusted Tempeh Chips, Cassava Chips, Emping Chips and Banana Chips Exporters"
                    }
                  </div>
                </p.Stack>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ggHH
                  )}
                >
                  {
                    "Discover the World of Indonesian Chips with Chipsia\n\nWelcome to Chipsia\u2019s news and articles page, where you\u2019ll find all the latest information about our delicious Indonesian chips. We specialize in a variety of traditional snacks, including tempeh chips, emping chips, cassava chips, and banana chips.\n\n"
                  }
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___0Ne7X)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hiQ
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"3 "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"for"}
                        </span>
                        <React.Fragment>{" $169"}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  <Button
                    colors={"black" as const}
                    endIcon={
                      <RightArrowIcon
                        className={classNames(projectcss.all, sty.svg__fjagw)}
                        role={"img"}
                      />
                    }
                    rounded={true}
                    showEndIcon={true}
                    size={"large" as const}
                    submitsForm={true}
                  >
                    {"Shop sale"}
                  </Button>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </section>
        ) : null}
        {true ? (
          <section
            data-plasmic-name={"whybanner"}
            data-plasmic-override={overrides.whybanner}
            className={classNames(projectcss.all, sty.whybanner)}
          >
            <div
              data-plasmic-name={"container42"}
              data-plasmic-override={overrides.container42}
              className={classNames(projectcss.all, sty.container42)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oMZoV)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__k5Yf9
                      )}
                    >
                      {"Why Import From Us ?"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__l0NMn
                      )}
                      colors={"link" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__fqK7Q)}
                          role={"img"}
                        />
                      }
                      link={`/product/why-choose-chipsia`}
                      showEndIcon={true}
                      submitsForm={true}
                    >
                      {"See more"}
                    </Button>
                  </div>
                ),
                value: args.container42
              })}
            </div>
            <div
              data-plasmic-name={"container5"}
              data-plasmic-override={overrides.container5}
              className={classNames(projectcss.all, sty.container5)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pGyUb)}
                >
                  <ProductCard
                    data-plasmic-name={"productCard4"}
                    data-plasmic-override={overrides.productCard4}
                    img={{
                      src: "/plasmic/chipsia/images/shoe14.png",
                      fullWidth: 840,
                      fullHeight: 840,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard4",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yk3Jh
                      )}
                    >
                      {"ADIDAS ULTRABOOST DNA X LEGO\u00ae PLATES SHOES"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bOFut
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard5"}
                    data-plasmic-override={overrides.productCard5}
                    className={classNames("__wab_instance", sty.productCard5)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe15.png",
                      fullWidth: 864,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard5",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xv0GH
                      )}
                    >
                      {"Nike Air Zoom Pegasus 38"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jq4Fu
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard6"}
                    data-plasmic-override={overrides.productCard6}
                    className={classNames("__wab_instance", sty.productCard6)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe16.png",
                      fullWidth: 840,
                      fullHeight: 840,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard6",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dS7Hd
                      )}
                    >
                      {"Club C 85 Vintage Men's Shoes"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9SZgg
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard7"}
                    data-plasmic-override={overrides.productCard7}
                    className={classNames("__wab_instance", sty.productCard7)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe17.png",
                      fullWidth: 864,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard7",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u5DVv
                      )}
                    >
                      {"Nike Air Max Genome"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fANwm
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard8"}
                    data-plasmic-override={overrides.productCard8}
                    className={classNames("__wab_instance", sty.productCard8)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe18.png",
                      fullWidth: 840,
                      fullHeight: 840,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard8",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rRg2O
                      )}
                    >
                      {"ULTRABOOST DNA 1.0 SHOES"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nu61D
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard9"}
                    data-plasmic-override={overrides.productCard9}
                    className={classNames("__wab_instance", sty.productCard9)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe19.png",
                      fullWidth: 864,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard9",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  />
                </p.Stack>
              ) : null}
            </div>
          </section>
        ) : null}
        {true ? (
          <EmojiValueProps
            data-plasmic-name={"emojiValueProps"}
            data-plasmic-override={overrides.emojiValueProps}
            className={classNames("__wab_instance", sty.emojiValueProps)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__ysvqu)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__brIkB
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__uVxSy)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value___5AgIc)}
                  icon={
                    <PlaneIcon
                      className={classNames(projectcss.all, sty.svg__mqYuK)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qHOwP
                    )}
                  >
                    {"worldwide shipping to any country"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gqGkp
                    )}
                  >
                    {
                      "We are Ready to Ship all of our products Worldwide by land, sea, and air. our packaging guarantee product is in prime quality after you received "
                    }
                  </div>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__ldjaF)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__iUot3
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__rZpdu)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value___7Lm9Q)}
                  icon={
                    <DocumentIcon
                      className={classNames(projectcss.all, sty.svg__zttlg)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n5Aht
                    )}
                  >
                    {"Your satisfaction guaranteed"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vw8Wr
                    )}
                  >
                    {
                      "Our export process is professional so you do not have to worry about product quality, we are experienced in the export process"
                    }
                  </div>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__jyxsj)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__oo0QA
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__uJqqL)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__vPaJl)}
                  icon={
                    <LockIcon
                      className={classNames(projectcss.all, sty.svg__tunKs)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gvo3
                    )}
                  >
                    {"Secure and easy payments process"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bTa2X
                    )}
                  >
                    {
                      "Don't worry about payment, we accept many forms of international payment so you can fulfill your demand without the high cost"
                    }
                  </div>
                </Value>
              </div>
            </p.Stack>
          </EmojiValueProps>
        ) : null}
        {true ? (
          <section className={classNames(projectcss.all, sty.section__pFqi)}>
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"container433"}
                data-plasmic-override={overrides.container433}
                hasGap={true}
                className={classNames(projectcss.all, sty.container433)}
              >
                <div className={classNames(projectcss.all, sty.column__ngxWa)}>
                  <Value
                    center={true}
                    children2={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__drdch
                        )}
                        colors={"black" as const}
                        endIcon={
                          <RightArrowIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nyS9
                            )}
                            role={"img"}
                          />
                        }
                        rounded={true}
                        size={"large" as const}
                        submitsForm={true}
                      >
                        {"Read our letter"}
                      </Button>
                    }
                    className={classNames("__wab_instance", sty.value__klneQ)}
                    icon={
                      <MedalIcon
                        className={classNames(projectcss.all, sty.svg__crpUe)}
                        role={"img"}
                      />
                    }
                    topBottom={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gjBl
                      )}
                    >
                      {"We guarantee everything we sell."}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c8M2T
                      )}
                    >
                      {
                        "Every product we sell, tempeh chips, banana chips, cassava chips, and emping chips also other products, are made from fresh ingredients with legacy recipes. so you will be satisfied with the product you received"
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ucoou
                      )}
                      colors={"link" as const}
                      submitsForm={true}
                    >
                      {"View guarantee"}
                    </Button>
                  </Value>
                </div>
                <div className={classNames(projectcss.all, sty.column__bJu6P)}>
                  <Value
                    center={true}
                    children2={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__yvGfS
                        )}
                        colors={"black" as const}
                        endIcon={
                          <RightArrowIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cFcc4
                            )}
                            role={"img"}
                          />
                        }
                        rounded={true}
                        size={"large" as const}
                        submitsForm={true}
                      >
                        {"Read our letter"}
                      </Button>
                    }
                    className={classNames("__wab_instance", sty.value__rlP6D)}
                    icon={
                      <LeafIcon
                        className={classNames(projectcss.all, sty.svg__yxXlh)}
                        role={"img"}
                      />
                    }
                    topBottom={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xDKen
                      )}
                    >
                      {"100 % organic and Plant based"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1DWe3
                      )}
                    >
                      {
                        "The market for our product is increasing rapidly in your country. Our chips Product made from fresh and natural plant-based ingredients, so it's healthy and can become an alternative for people who are vegetarian or just want to consume healthy but  tasty snacks"
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___71U1P
                      )}
                      colors={"link" as const}
                      submitsForm={true}
                    />
                  </Value>
                </div>
                <div className={classNames(projectcss.all, sty.column__r6Lgo)}>
                  <Value
                    center={true}
                    children2={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___2U5Sj
                        )}
                        colors={"black" as const}
                        endIcon={
                          <RightArrowIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___3MvOo
                            )}
                            role={"img"}
                          />
                        }
                        rounded={true}
                        size={"large" as const}
                        submitsForm={true}
                      >
                        {"Read our letter"}
                      </Button>
                    }
                    className={classNames("__wab_instance", sty.value__lDtL8)}
                    icon={
                      <MoneySvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__zgjWe)}
                        role={"img"}
                      />
                    }
                    topBottom={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dMWae
                      )}
                    >
                      {"Reap High Profit by becoming importer"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rC5Ny
                      )}
                    >
                      {
                        "Our product is in high demand for the export market, now it's your turn to reap high profit by becoming an importer of our products such as tempeh chips, banana chips, emping chips, and cassava chips in your country "
                      }
                    </div>
                    <Button
                      className={classNames("__wab_instance", sty.button__pqD4)}
                      colors={"link" as const}
                      submitsForm={true}
                    />
                  </Value>
                </div>
                <div className={classNames(projectcss.all, sty.column__hdRz2)}>
                  <Value
                    center={true}
                    children2={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__me0Qc
                        )}
                        colors={"black" as const}
                        endIcon={
                          <RightArrowIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ggs1
                            )}
                            role={"img"}
                          />
                        }
                        rounded={true}
                        size={"large" as const}
                        submitsForm={true}
                      >
                        {"Read our letter"}
                      </Button>
                    }
                    className={classNames("__wab_instance", sty.value___2IfAz)}
                    icon={
                      <PeaceIcon
                        className={classNames(projectcss.all, sty.svg___3RtFc)}
                        role={"img"}
                      />
                    }
                    topBottom={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jOsj1
                      )}
                    >
                      {"We give back for every sale."}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5XaWl
                      )}
                    >
                      {
                        "we give back to our people. By Importing from us you also contribute to local communities of traditional Indonesian food producers, because we only produce our product by empowering local Indonesian people"
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__hob5Z
                      )}
                      colors={"link" as const}
                      submitsForm={true}
                    />
                  </Value>
                </div>
              </p.Stack>
            ) : null}
          </section>
        ) : null}
        <Footer
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          className={classNames("__wab_instance", sty.footer)}
        />
      </main>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "h1",
    "loadingboundaryartikel",
    "productCard3",
    "article",
    "rating",
    "whybanner",
    "container42",
    "container5",
    "productCard4",
    "productCard5",
    "productCard6",
    "productCard7",
    "productCard8",
    "productCard9",
    "emojiValueProps",
    "columns",
    "container433",
    "footer"
  ],
  navBar: ["navBar"],
  h1: ["h1"],
  loadingboundaryartikel: [
    "loadingboundaryartikel",
    "productCard3",
    "article",
    "rating"
  ],
  productCard3: ["productCard3", "article", "rating"],
  article: ["article"],
  rating: ["rating"],
  whybanner: [
    "whybanner",
    "container42",
    "container5",
    "productCard4",
    "productCard5",
    "productCard6",
    "productCard7",
    "productCard8",
    "productCard9"
  ],
  container42: ["container42"],
  container5: [
    "container5",
    "productCard4",
    "productCard5",
    "productCard6",
    "productCard7",
    "productCard8",
    "productCard9"
  ],
  productCard4: ["productCard4"],
  productCard5: ["productCard5"],
  productCard6: ["productCard6"],
  productCard7: ["productCard7"],
  productCard8: ["productCard8"],
  productCard9: ["productCard9"],
  emojiValueProps: ["emojiValueProps", "columns"],
  columns: ["columns"],
  container433: ["container433"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "main";
  navBar: typeof NavBar;
  h1: "h1";
  loadingboundaryartikel: typeof LoadingBoundary;
  productCard3: typeof ProductCard;
  article: "article";
  rating: typeof Rating;
  whybanner: "section";
  container42: "div";
  container5: "div";
  productCard4: typeof ProductCard;
  productCard5: typeof ProductCard;
  productCard6: typeof ProductCard;
  productCard7: typeof ProductCard;
  productCard8: typeof ProductCard;
  productCard9: typeof ProductCard;
  emojiValueProps: typeof EmojiValueProps;
  columns: "div";
  container433: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticles__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticles__VariantsArgs;
    args?: PlasmicArticles__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticles__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticles__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArticles__ArgProps,
          internalVariantPropNames: PlasmicArticles__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArticles__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticles";
  } else {
    func.displayName = `PlasmicArticles.${nodeName}`;
  }
  return func;
}

export const PlasmicArticles = Object.assign(
  // Top-level PlasmicArticles renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    h1: makeNodeComponent("h1"),
    loadingboundaryartikel: makeNodeComponent("loadingboundaryartikel"),
    productCard3: makeNodeComponent("productCard3"),
    article: makeNodeComponent("article"),
    rating: makeNodeComponent("rating"),
    whybanner: makeNodeComponent("whybanner"),
    container42: makeNodeComponent("container42"),
    container5: makeNodeComponent("container5"),
    productCard4: makeNodeComponent("productCard4"),
    productCard5: makeNodeComponent("productCard5"),
    productCard6: makeNodeComponent("productCard6"),
    productCard7: makeNodeComponent("productCard7"),
    productCard8: makeNodeComponent("productCard8"),
    productCard9: makeNodeComponent("productCard9"),
    emojiValueProps: makeNodeComponent("emojiValueProps"),
    columns: makeNodeComponent("columns"),
    container433: makeNodeComponent("container433"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicArticles
    internalVariantProps: PlasmicArticles__VariantProps,
    internalArgProps: PlasmicArticles__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Articles & News about Chipsia Chips Products ",
      description:
        "News and articles about Chipsia Supplier of Tempeh Chips, Banana Chips, Cassava Chips, Emping Chips and Tofu Chips ,chips business partnership",
      ogImageSrc:
        "https://site-assets.plasmic.app/54f3ce18d37d548646a3665708ddddc8.jpg",
      canonical: "https://chipsia.com/articles"
    }
  }
);

export default PlasmicArticles;
/* prettier-ignore-end */
