// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: wAHNmXk0dn1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: z08NHQzGDufhl_/component
import Rating from "../../Rating"; // plasmic-import: JRf21XH4cTf7V-/component

import { useScreenVariants as useScreenVariantsbvEuI4Yp87Tgs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BV_euI4yp87tgs/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chipsia.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicNewsReadCard.module.css"; // plasmic-import: wAHNmXk0dn1/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: vIBh7hkedAKVLS/icon

createPlasmicElementProxy;

export type PlasmicNewsReadCard__VariantMembers = {
  small: "small";
};
export type PlasmicNewsReadCard__VariantsArgs = {
  small?: SingleBooleanChoiceArg<"small">;
};
type VariantPropType = keyof PlasmicNewsReadCard__VariantsArgs;
export const PlasmicNewsReadCard__VariantProps = new Array<VariantPropType>(
  "small"
);

export type PlasmicNewsReadCard__ArgsType = {
  tags?: React.ReactNode;
  children?: React.ReactNode;
  link?: string;
  rating?: React.ReactNode;
  img?: React.ComponentProps<typeof p.PlasmicImg>["src"];
};
type ArgPropType = keyof PlasmicNewsReadCard__ArgsType;
export const PlasmicNewsReadCard__ArgProps = new Array<ArgPropType>(
  "tags",
  "children",
  "link",
  "rating",
  "img"
);

export type PlasmicNewsReadCard__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  column?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultNewsReadCardProps {
  tags?: React.ReactNode;
  children?: React.ReactNode;
  link?: string;
  rating?: React.ReactNode;
  img?: React.ComponentProps<typeof p.PlasmicImg>["src"];
  small?: SingleBooleanChoiceArg<"small">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewsReadCard__RenderFunc(props: {
  variants: PlasmicNewsReadCard__VariantsArgs;
  args: PlasmicNewsReadCard__ArgsType;
  overrides: PlasmicNewsReadCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          img: {
            src: "/plasmic/chipsia/images/shoe14.png",
            fullWidth: 840,
            fullHeight: 840,
            aspectRatio: undefined
          }
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "small",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.small
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbvEuI4Yp87Tgs()
  });

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootsmall]: hasVariant($state, "small", "small") }
      )}
      component={Link}
      platform={"nextjs"}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        data-plasmic-name={"column"}
        data-plasmic-override={overrides.column}
        className={classNames(projectcss.all, sty.column)}
      >
        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link, {
            [sty.linksmall]: hasVariant($state, "small", "small")
          })}
          component={Link}
          href={args.link}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"256px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"256px" as const}
            displayWidth={"256px" as const}
            src={args.img}
          />

          {(
            hasVariant($state, "small", "small") && triggers.hover_root
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__yhPs9, {
                [sty.freeBoxsmall__yhPs9UOTzF]: hasVariant(
                  $state,
                  "small",
                  "small"
                )
              })}
            />
          ) : null}
          {(hasVariant($state, "small", "small") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gyPg8, {
                [sty.freeBoxsmall__gyPg8UOTzF]: hasVariant(
                  $state,
                  "small",
                  "small"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__kJgkn)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      colors={"lightGray" as const}
                      size={"small" as const}
                      submitsForm={true}
                    >
                      {"New"}
                    </Button>
                  ),
                  value: args.tags
                })}
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Rating
                      className={classNames(
                        "__wab_instance",
                        sty.rating__gy4Sc
                      )}
                    />
                  ),

                  value: args.rating
                })}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ppdR)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jhRJw
                        )}
                      >
                        {"Product name"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jEnGx
                        )}
                      >
                        {"If you can dream it, you can build it."}
                      </div>
                    </React.Fragment>
                  ),
                  value: args.children
                })}
              </p.Stack>
            </p.Stack>
          ) : null}
        </p.PlasmicLink>
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "column", "link", "img"],
  column: ["column", "link", "img"],
  link: ["link", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  column: "div";
  link: "a";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewsReadCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewsReadCard__VariantsArgs;
    args?: PlasmicNewsReadCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewsReadCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewsReadCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewsReadCard__ArgProps,
          internalVariantPropNames: PlasmicNewsReadCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewsReadCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewsReadCard";
  } else {
    func.displayName = `PlasmicNewsReadCard.${nodeName}`;
  }
  return func;
}

export const PlasmicNewsReadCard = Object.assign(
  // Top-level PlasmicNewsReadCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    column: makeNodeComponent("column"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicNewsReadCard
    internalVariantProps: PlasmicNewsReadCard__VariantProps,
    internalArgProps: PlasmicNewsReadCard__ArgProps
  }
);

export default PlasmicNewsReadCard;
/* prettier-ignore-end */
