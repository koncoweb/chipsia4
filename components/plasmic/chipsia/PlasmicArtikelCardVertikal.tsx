// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: y1GacJeVxU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ProductCard from "../../ProductCard"; // plasmic-import: be4gyluQ_9OJzR/component
import Button from "../../Button"; // plasmic-import: z08NHQzGDufhl_/component
import Rating from "../../Rating"; // plasmic-import: JRf21XH4cTf7V-/component

import { useScreenVariants as useScreenVariantsbvEuI4Yp87Tgs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BV_euI4yp87tgs/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chipsia.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicArtikelCardVertikal.module.css"; // plasmic-import: y1GacJeVxU/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: vIBh7hkedAKVLS/icon

createPlasmicElementProxy;

export type PlasmicArtikelCardVertikal__VariantMembers = {
  mendatar: "mendatar";
};
export type PlasmicArtikelCardVertikal__VariantsArgs = {
  mendatar?: SingleBooleanChoiceArg<"mendatar">;
};
type VariantPropType = keyof PlasmicArtikelCardVertikal__VariantsArgs;
export const PlasmicArtikelCardVertikal__VariantProps =
  new Array<VariantPropType>("mendatar");

export type PlasmicArtikelCardVertikal__ArgsType = {};
type ArgPropType = keyof PlasmicArtikelCardVertikal__ArgsType;
export const PlasmicArtikelCardVertikal__ArgProps = new Array<ArgPropType>();

export type PlasmicArtikelCardVertikal__OverridesType = {
  artikelCard?: p.Flex<typeof ProductCard>;
  rating?: p.Flex<typeof Rating>;
};

export interface DefaultArtikelCardVertikalProps {
  mendatar?: SingleBooleanChoiceArg<"mendatar">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArtikelCardVertikal__RenderFunc(props: {
  variants: PlasmicArtikelCardVertikal__VariantsArgs;
  args: PlasmicArtikelCardVertikal__ArgsType;
  overrides: PlasmicArtikelCardVertikal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "mendatar",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mendatar
      },
      {
        path: "artikelCard.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbvEuI4Yp87Tgs()
  });

  return (
    true ? (
      <ProductCard
        data-plasmic-name={"artikelCard"}
        data-plasmic-override={overrides.artikelCard}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames("__wab_instance", sty.artikelCard, {
          [sty.artikelCardmendatar]: hasVariant($state, "mendatar", "mendatar")
        })}
        onEntryidvarChange={p.generateStateOnChangeProp($state, [
          "artikelCard",
          "entryidvar"
        ])}
        rating={
          <Rating
            data-plasmic-name={"rating"}
            data-plasmic-override={overrides.rating}
            className={classNames("__wab_instance", sty.rating)}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xbjMk
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $ctx.currentContentfulArtikelItem.fields.judul;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Product name";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wx8BG
          )}
        >
          {"If you can dream it, you can build it."}
        </div>
      </ProductCard>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  artikelCard: ["artikelCard", "rating"],
  rating: ["rating"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  artikelCard: typeof ProductCard;
  rating: typeof Rating;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArtikelCardVertikal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArtikelCardVertikal__VariantsArgs;
    args?: PlasmicArtikelCardVertikal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArtikelCardVertikal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArtikelCardVertikal__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicArtikelCardVertikal__ArgProps,
          internalVariantPropNames: PlasmicArtikelCardVertikal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArtikelCardVertikal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "artikelCard") {
    func.displayName = "PlasmicArtikelCardVertikal";
  } else {
    func.displayName = `PlasmicArtikelCardVertikal.${nodeName}`;
  }
  return func;
}

export const PlasmicArtikelCardVertikal = Object.assign(
  // Top-level PlasmicArtikelCardVertikal renders the root element
  makeNodeComponent("artikelCard"),
  {
    // Helper components rendering sub-elements
    rating: makeNodeComponent("rating"),

    // Metadata about props expected for PlasmicArtikelCardVertikal
    internalVariantProps: PlasmicArtikelCardVertikal__VariantProps,
    internalArgProps: PlasmicArtikelCardVertikal__ArgProps
  }
);

export default PlasmicArtikelCardVertikal;
/* prettier-ignore-end */
