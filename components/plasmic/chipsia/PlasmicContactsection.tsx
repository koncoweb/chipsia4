// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: wfTulyuJy5S

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: 8Gyy7YGh9_a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chipsia.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicContactsection.module.css"; // plasmic-import: wfTulyuJy5S/css

import EmptyCircleIcon from "./icons/PlasmicIcon__EmptyCircle"; // plasmic-import: c0cvA58RQG2MpT/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: MK8lZMaQYeM/icon
import EmailIcon from "./icons/PlasmicIcon__Email"; // plasmic-import: OjmfE5EJlBFvwM/icon
import CashIcon from "./icons/PlasmicIcon__Cash"; // plasmic-import: 5VuAsHROVMMbW9/icon

createPlasmicElementProxy;

export type PlasmicContactsection__VariantMembers = {};
export type PlasmicContactsection__VariantsArgs = {};
type VariantPropType = keyof PlasmicContactsection__VariantsArgs;
export const PlasmicContactsection__VariantProps = new Array<VariantPropType>();

export type PlasmicContactsection__ArgsType = {
  query?: any;
};
type ArgPropType = keyof PlasmicContactsection__ArgsType;
export const PlasmicContactsection__ArgProps = new Array<ArgPropType>("query");

export type PlasmicContactsection__OverridesType = {
  contactsection?: p.Flex<"aside">;
  buyNowH3?: p.Flex<"h3">;
  columns?: p.Flex<"div">;
};

export interface DefaultContactsectionProps {
  query?: any;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContactsection__RenderFunc(props: {
  variants: PlasmicContactsection__VariantsArgs;
  args: PlasmicContactsection__ArgsType;
  overrides: PlasmicContactsection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <aside
      data-plasmic-name={"contactsection"}
      data-plasmic-override={overrides.contactsection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.contactsection
      )}
    >
      <h3
        data-plasmic-name={"buyNowH3"}
        data-plasmic-override={overrides.buyNowH3}
        className={classNames(
          projectcss.all,
          projectcss.h3,
          projectcss.__wab_text,
          sty.buyNowH3
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return (
                "Get Special Price & Import " +
                $props.query.data.response.items[0].fields.productName +
                " to your country"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </h3>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__eCJjs
        )}
      >
        {"choose your preferred method below"}
      </div>
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column___0Tvsu)}>
          <Button2
            className={classNames("__wab_instance", sty.button2___5AHEp)}
            color={"green" as const}
            link={(() => {
              try {
                return "https://wa.me/6281936515980";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            showStartIcon={true}
            startIcon={
              <EmptyCircleIcon
                className={classNames(projectcss.all, sty.svg__vTc39)}
                role={"img"}
              />
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zDYqV
              )}
            >
              {"Whatsapp"}
            </div>
          </Button2>
        </div>
        <div className={classNames(projectcss.all, sty.column__ksRr5)}>
          <Button2
            className={classNames("__wab_instance", sty.button2__bpvId)}
            color={"blue" as const}
            link={"mailto:info@chipsia.com" as const}
            showStartIcon={true}
            startIcon={
              <EmailIcon
                className={classNames(projectcss.all, sty.svg__xit2N)}
                role={"img"}
              />
            }
          >
            {"Email Us"}
          </Button2>
        </div>
        <div className={classNames(projectcss.all, sty.column__yo2Eo)}>
          <Button2
            className={classNames("__wab_instance", sty.button2__oMbl7)}
            link={`/partnership`}
            showStartIcon={true}
            startIcon={
              <CashIcon
                className={classNames(projectcss.all, sty.svg__xfNtM)}
                role={"img"}
              />
            }
          >
            {"fill form"}
          </Button2>
        </div>
      </div>
    </aside>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  contactsection: ["contactsection", "buyNowH3", "columns"],
  buyNowH3: ["buyNowH3"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  contactsection: "aside";
  buyNowH3: "h3";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContactsection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContactsection__VariantsArgs;
    args?: PlasmicContactsection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContactsection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContactsection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContactsection__ArgProps,
          internalVariantPropNames: PlasmicContactsection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContactsection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "contactsection") {
    func.displayName = "PlasmicContactsection";
  } else {
    func.displayName = `PlasmicContactsection.${nodeName}`;
  }
  return func;
}

export const PlasmicContactsection = Object.assign(
  // Top-level PlasmicContactsection renders the root element
  makeNodeComponent("contactsection"),
  {
    // Helper components rendering sub-elements
    buyNowH3: makeNodeComponent("buyNowH3"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicContactsection
    internalVariantProps: PlasmicContactsection__VariantProps,
    internalArgProps: PlasmicContactsection__ArgProps
  }
);

export default PlasmicContactsection;
/* prettier-ignore-end */
