// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: CvbgQQ_-h1SL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: G3sjWhr-Dq/codeComponent
import NavBar from "../../NavBar"; // plasmic-import: 38U0KJJ_izLvF0/component
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: u-J0rH0B-4/codeComponent
import Contactsection from "../../Contactsection"; // plasmic-import: wfTulyuJy5S/component
import Button from "../../Button"; // plasmic-import: z08NHQzGDufhl_/component
import ProductCard from "../../ProductCard"; // plasmic-import: be4gyluQ_9OJzR/component
import Rating from "../../Rating"; // plasmic-import: JRf21XH4cTf7V-/component
import Value from "../../Value"; // plasmic-import: 3bRucgJCclHNht/component
import Footer from "../../Footer"; // plasmic-import: TjbIATQS4AqoQO/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: XZMu2sj2Xg/codeComponent

import { useScreenVariants as useScreenVariantsbvEuI4Yp87Tgs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BV_euI4yp87tgs/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chipsia.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicRead.module.css"; // plasmic-import: CvbgQQ_-h1SL/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: vIBh7hkedAKVLS/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: PS6DVWNrsATME2/icon
import MedalIcon from "./icons/PlasmicIcon__Medal"; // plasmic-import: rGAFqrIjwFkcZM/icon
import LeafIcon from "./icons/PlasmicIcon__Leaf"; // plasmic-import: sxhoIq9e99bhcn/icon
import MoneySvgrepoComsvgIcon from "./icons/PlasmicIcon__MoneySvgrepoComsvg"; // plasmic-import: ra_o6xwOHS/icon
import PeaceIcon from "./icons/PlasmicIcon__Peace"; // plasmic-import: X6eB28EOD3seMa/icon

createPlasmicElementProxy;

export type PlasmicRead__VariantMembers = {};
export type PlasmicRead__VariantsArgs = {};
type VariantPropType = keyof PlasmicRead__VariantsArgs;
export const PlasmicRead__VariantProps = new Array<VariantPropType>();

export type PlasmicRead__ArgsType = {
  container42?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRead__ArgsType;
export const PlasmicRead__ArgProps = new Array<ArgPropType>("container42");

export type PlasmicRead__OverridesType = {
  root?: p.Flex<"main">;
  pageMetadataOverride?: p.Flex<typeof PlasmicHead>;
  navBar?: p.Flex<typeof NavBar>;
  loadingBoundary?: p.Flex<typeof LoadingBoundary>;
  h1?: p.Flex<"h1">;
  img?: p.Flex<typeof p.PlasmicImg>;
  cite?: p.Flex<"cite">;
  aside?: p.Flex<"aside">;
  dd?: p.Flex<"dd">;
  h3?: p.Flex<"h3">;
  contactsection?: p.Flex<typeof Contactsection>;
  container42?: p.Flex<"div">;
  container5?: p.Flex<"div">;
  productCard?: p.Flex<typeof ProductCard>;
  productCard2?: p.Flex<typeof ProductCard>;
  productCard3?: p.Flex<typeof ProductCard>;
  productCard4?: p.Flex<typeof ProductCard>;
  productCard5?: p.Flex<typeof ProductCard>;
  productCard6?: p.Flex<typeof ProductCard>;
  container433?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultReadProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRead__RenderFunc(props: {
  variants: PlasmicRead__VariantsArgs;
  args: PlasmicRead__ArgsType;
  overrides: PlasmicRead__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "productCard.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard2.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard3.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard4.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard5.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard6.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const new$Queries = {
    query2: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "32yzKuv9KNcYw8vxYbcdVa",
            opId: "0a577d9b-dd4a-40aa-a848-96cf29a107fc",
            userArgs: {
              path: [$ctx.params.entryidpath]
            },
            cacheKey: "plasmic.$.6ydqf67U9.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    queryGambarUtama: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "sEWePRBicGXUKP7Ruzme3E",
            opId: "1bf5791d-d31c-43bb-aa76-7f1e974a5bab",
            userArgs: {
              path: [$queries.query2.data.response.fields.gambarUtama.sys.id]
            },
            cacheKey: "plasmic.$.PCUZ_xRfs.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbvEuI4Yp87Tgs()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <meta
          key="description"
          name="description"
          content={PlasmicRead.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicRead.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicRead.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicRead.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicRead.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicRead.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <main
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PlasmicHead
            data-plasmic-name={"pageMetadataOverride"}
            data-plasmic-override={overrides.pageMetadataOverride}
            canonical={`https://chipsia.com/articles/${$ctx.params.entryslug}-${$ctx.params.entryidpath}`}
            className={classNames("__wab_instance", sty.pageMetadataOverride)}
            description={(() => {
              try {
                return $queries.query2.data.response.fields.deskripsiSeo;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            image={(() => {
              try {
                return $queries.queryGambarUtama.data.response.fields.file.url;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            title={(() => {
              try {
                return $queries.query2.data.response.fields.judul;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <p.Stack
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section__y9KwG)}
          >
            <LoadingBoundary
              data-plasmic-name={"loadingBoundary"}
              data-plasmic-override={overrides.loadingBoundary}
              className={classNames("__wab_instance", sty.loadingBoundary)}
              loadingState={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oyFqK
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <React.Fragment>
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__q3TE6
                        )}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.query2.data.response.fields
                                  .judul;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "News & Articles";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h1>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tzhdR
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "Updated at : " +
                                  (() => {
                                    const dateTime = new Date(
                                      $queries.query2.data.response.sys.updatedAt
                                    );
                                    const day = String(
                                      dateTime.getDate()
                                    ).padStart(2, "0");
                                    const month = String(
                                      dateTime.getMonth() + 1
                                    ).padStart(2, "0");
                                    const year = dateTime.getFullYear();
                                    return `${day}-${month}-${year}`;
                                  })()
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"90%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"90%" as const}
                      loading={"lazy" as const}
                      src={(() => {
                        try {
                          return $queries.queryGambarUtama.data.response.fields
                            .file.url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__bo745)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__m27Xn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__al7Sd
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7Psy8
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns___9Aemi
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column___9Gulm
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__twAli
                                  )}
                                >
                                  {"Writer : "}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__yY0Lb
                                )}
                              >
                                <cite
                                  data-plasmic-name={"cite"}
                                  data-plasmic-override={overrides.cite}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.cite
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.query2.data.response
                                          .fields.writer;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </cite>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mcN8W
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns__v9Di
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__akLr3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lyzV
                                  )}
                                >
                                  {"Category :"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__qIz0D
                                )}
                              >
                                <aside
                                  data-plasmic-name={"aside"}
                                  data-plasmic-override={overrides.aside}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.aside
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.query2.data.response
                                          .fields.kategori;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </aside>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__ktgF6
                        )}
                      >
                        <dd
                          data-plasmic-name={"dd"}
                          data-plasmic-override={overrides.dd}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dd
                          )}
                        >
                          <div
                            className={projectcss.__wab_expr_html_text}
                            dangerouslySetInnerHTML={{
                              __html: (() => {
                                try {
                                  return (
                                    "Summary : " +
                                    $queries.query2.data.response.fields
                                      .deskripsiSeo
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()
                            }}
                          />
                        </dd>
                      </div>
                    </p.Stack>
                    {(
                      (() => {
                        try {
                          return $queries.query2.data.response.fields.isi
                            .content;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Jgfc
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return $queries.query2.data.response.fields.isi
                                  .content[currentIndex].content[0].value;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </div>
                    ))}
                  </React.Fragment>
                )}
              </ph.DataCtxReader>
            </LoadingBoundary>
          </p.Stack>
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            {
              "Contact Us today and reap Huge Profits by Importing Indonesian Chips !"
            }
          </h3>
          <Contactsection
            data-plasmic-name={"contactsection"}
            data-plasmic-override={overrides.contactsection}
            className={classNames("__wab_instance", sty.contactsection)}
          />

          <section className={classNames(projectcss.all, sty.section__fg0FC)}>
            <div
              data-plasmic-name={"container42"}
              data-plasmic-override={overrides.container42}
              className={classNames(projectcss.all, sty.container42)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3F4U)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4W88
                      )}
                    >
                      {"Why Import Indonesian chips and snack From Us ?"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ohZw9
                      )}
                      colors={"link" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__i5Zwv)}
                          role={"img"}
                        />
                      }
                      showEndIcon={true}
                      submitsForm={true}
                    >
                      {"See more"}
                    </Button>
                  </div>
                ),
                value: args.container42
              })}
            </div>
            <div
              data-plasmic-name={"container5"}
              data-plasmic-override={overrides.container5}
              className={classNames(projectcss.all, sty.container5)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__j6J74)}
                >
                  <ProductCard
                    data-plasmic-name={"productCard"}
                    data-plasmic-override={overrides.productCard}
                    img={{
                      src: "/plasmic/chipsia/images/shoe14.png",
                      fullWidth: 840,
                      fullHeight: 840,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Af5V
                      )}
                    >
                      {"ADIDAS ULTRABOOST DNA X LEGO\u00ae PLATES SHOES"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a6Ay
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard2"}
                    data-plasmic-override={overrides.productCard2}
                    className={classNames("__wab_instance", sty.productCard2)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe15.png",
                      fullWidth: 864,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard2",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qaCiN
                      )}
                    >
                      {"Nike Air Zoom Pegasus 38"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cygY
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard3"}
                    data-plasmic-override={overrides.productCard3}
                    className={classNames("__wab_instance", sty.productCard3)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe16.png",
                      fullWidth: 840,
                      fullHeight: 840,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard3",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3VJd5
                      )}
                    >
                      {"Club C 85 Vintage Men's Shoes"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0BRDt
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard4"}
                    data-plasmic-override={overrides.productCard4}
                    className={classNames("__wab_instance", sty.productCard4)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe17.png",
                      fullWidth: 864,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard4",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p2MBy
                      )}
                    >
                      {"Nike Air Max Genome"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cfHjU
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard5"}
                    data-plasmic-override={overrides.productCard5}
                    className={classNames("__wab_instance", sty.productCard5)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe18.png",
                      fullWidth: 840,
                      fullHeight: 840,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard5",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ea76P
                      )}
                    >
                      {"ULTRABOOST DNA 1.0 SHOES"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f5Ucp
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard6"}
                    data-plasmic-override={overrides.productCard6}
                    className={classNames("__wab_instance", sty.productCard6)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe19.png",
                      fullWidth: 864,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard6",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  />
                </p.Stack>
              ) : null}
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__kmwiJ)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container433"}
              data-plasmic-override={overrides.container433}
              hasGap={true}
              className={classNames(projectcss.all, sty.container433)}
            >
              <div className={classNames(projectcss.all, sty.column__wy6Wf)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__hYsfa
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__tagZf)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__cPZ)}
                  icon={
                    <MedalIcon
                      className={classNames(projectcss.all, sty.svg__dkiO6)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zbQ
                    )}
                  >
                    {"We guarantee everything we sell."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g3YWe
                    )}
                  >
                    {
                      "Every product we sell, tempeh chips, banana chips, cassava chips, and emping chips also other products, are made from fresh ingredients with legacy recipes. so you will be satisfied with the product you received"
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__vOsz5)}
                    colors={"link" as const}
                    submitsForm={true}
                  >
                    {"View guarantee"}
                  </Button>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__uip4O)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames("__wab_instance", sty.button__xXwu)}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__bhJkJ)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value___5EbG7)}
                  icon={
                    <LeafIcon
                      className={classNames(projectcss.all, sty.svg__la1Vv)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xWoxp
                    )}
                  >
                    {"100 % organic and Plant based"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h4S0H
                    )}
                  >
                    {
                      "The market for our product is increasing rapidly in your country. Our chips Product made from fresh and natural plant-based ingredients, so it's healthy and can become an alternative for people who are vegetarian or just want to consume healthy but  tasty snacks"
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__kgV0)}
                    colors={"link" as const}
                    submitsForm={true}
                  />
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__mshEt)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__fD0Hd
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__mdVGk)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__sgHgk)}
                  icon={
                    <MoneySvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg___4ZhHu)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uDqok
                    )}
                  >
                    {"Reap High Profit by becoming importer"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fnW1U
                    )}
                  >
                    {
                      "Our product is in high demand for the export market, now it's your turn to reap high profit by becoming an importer of our products such as tempeh chips, banana chips, emping chips, and cassava chips in your country "
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button___4XF8P)}
                    colors={"link" as const}
                    submitsForm={true}
                  />
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__xx1Ea)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__d7ZvE
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__dixHr)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__rpW2)}
                  icon={
                    <PeaceIcon
                      className={classNames(projectcss.all, sty.svg__hbMaE)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ynxV
                    )}
                  >
                    {"We give back for every sale."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7XyBx
                    )}
                  >
                    {
                      "we give back to our people. By Importing from us you also contribute to local communities of traditional Indonesian food producers, because we only produce our product by empowering local Indonesian people"
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__naLb2)}
                    colors={"link" as const}
                    submitsForm={true}
                  />
                </Value>
              </div>
            </p.Stack>
          </section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </main>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "navBar",
    "loadingBoundary",
    "h1",
    "img",
    "cite",
    "aside",
    "dd",
    "h3",
    "contactsection",
    "container42",
    "container5",
    "productCard",
    "productCard2",
    "productCard3",
    "productCard4",
    "productCard5",
    "productCard6",
    "container433",
    "footer"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  navBar: ["navBar"],
  loadingBoundary: ["loadingBoundary", "h1", "img", "cite", "aside", "dd"],
  h1: ["h1"],
  img: ["img"],
  cite: ["cite"],
  aside: ["aside"],
  dd: ["dd"],
  h3: ["h3"],
  contactsection: ["contactsection"],
  container42: ["container42"],
  container5: [
    "container5",
    "productCard",
    "productCard2",
    "productCard3",
    "productCard4",
    "productCard5",
    "productCard6"
  ],
  productCard: ["productCard"],
  productCard2: ["productCard2"],
  productCard3: ["productCard3"],
  productCard4: ["productCard4"],
  productCard5: ["productCard5"],
  productCard6: ["productCard6"],
  container433: ["container433"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "main";
  pageMetadataOverride: typeof PlasmicHead;
  navBar: typeof NavBar;
  loadingBoundary: typeof LoadingBoundary;
  h1: "h1";
  img: typeof p.PlasmicImg;
  cite: "cite";
  aside: "aside";
  dd: "dd";
  h3: "h3";
  contactsection: typeof Contactsection;
  container42: "div";
  container5: "div";
  productCard: typeof ProductCard;
  productCard2: typeof ProductCard;
  productCard3: typeof ProductCard;
  productCard4: typeof ProductCard;
  productCard5: typeof ProductCard;
  productCard6: typeof ProductCard;
  container433: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRead__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRead__VariantsArgs;
    args?: PlasmicRead__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRead__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRead__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRead__ArgProps,
          internalVariantPropNames: PlasmicRead__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRead__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRead";
  } else {
    func.displayName = `PlasmicRead.${nodeName}`;
  }
  return func;
}

export const PlasmicRead = Object.assign(
  // Top-level PlasmicRead renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    navBar: makeNodeComponent("navBar"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    h1: makeNodeComponent("h1"),
    img: makeNodeComponent("img"),
    cite: makeNodeComponent("cite"),
    aside: makeNodeComponent("aside"),
    dd: makeNodeComponent("dd"),
    h3: makeNodeComponent("h3"),
    contactsection: makeNodeComponent("contactsection"),
    container42: makeNodeComponent("container42"),
    container5: makeNodeComponent("container5"),
    productCard: makeNodeComponent("productCard"),
    productCard2: makeNodeComponent("productCard2"),
    productCard3: makeNodeComponent("productCard3"),
    productCard4: makeNodeComponent("productCard4"),
    productCard5: makeNodeComponent("productCard5"),
    productCard6: makeNodeComponent("productCard6"),
    container433: makeNodeComponent("container433"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicRead
    internalVariantProps: PlasmicRead__VariantProps,
    internalArgProps: PlasmicRead__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description:
        "Read News and articles about Chipsia Supplier of Tempeh Chips, Banana Chips, Cassava Chips, Emping Chips and Tofu Chips ,chips business partnership",
      ogImageSrc:
        "https://site-assets.plasmic.app/54f3ce18d37d548646a3665708ddddc8.jpg",
      canonical: "https://chipsia.com/articles/read"
    }
  }
);

export default PlasmicRead;
/* prettier-ignore-end */
