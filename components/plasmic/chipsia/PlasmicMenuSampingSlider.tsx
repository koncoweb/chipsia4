// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: FZywUiewNM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbvEuI4Yp87Tgs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BV_euI4yp87tgs/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chipsia.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicMenuSampingSlider.module.css"; // plasmic-import: FZywUiewNM/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: SVrAD7F3Yb_/icon

createPlasmicElementProxy;

export type PlasmicMenuSampingSlider__VariantMembers = {};
export type PlasmicMenuSampingSlider__VariantsArgs = {};
type VariantPropType = keyof PlasmicMenuSampingSlider__VariantsArgs;
export const PlasmicMenuSampingSlider__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMenuSampingSlider__ArgsType = {};
type ArgPropType = keyof PlasmicMenuSampingSlider__ArgsType;
export const PlasmicMenuSampingSlider__ArgProps = new Array<ArgPropType>();

export type PlasmicMenuSampingSlider__OverridesType = {
  menuSampingSlider?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  svg?: p.Flex<"svg">;
};

export interface DefaultMenuSampingSliderProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuSampingSlider__RenderFunc(props: {
  variants: PlasmicMenuSampingSlider__VariantsArgs;
  args: PlasmicMenuSampingSlider__ArgsType;
  overrides: PlasmicMenuSampingSlider__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbvEuI4Yp87Tgs()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"menuSampingSlider"}
      data-plasmic-override={overrides.menuSampingSlider}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.menuSampingSlider
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ma3S5)}>
        {(
          (() => {
            try {
              return $ctx.currentContentfulArtikelItem.fields.gambarUtama.fields
                .file.url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })() ?? []
        ).map((currentItem, currentIndex) => (
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"56px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"56px" as const}
            key={currentIndex}
            src={
              "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/red-apple_1f34e.png" as const
            }
          />
        ))}
      </div>
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__eH8Vc)}>
          <Icon8Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      ) : null}
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__tBjjo)}
      >
        {(
          (() => {
            try {
              return $ctx.currentContentfulArtikelItem.fields.judul;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })() ?? []
        ).map((currentItem, currentIndex) => (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bNe2B
            )}
            key={currentIndex}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Accomplish more"
              : "Accomplish more"}
          </div>
        ))}

        {(
          (() => {
            try {
              return $ctx.currentContentfulArtikelItem.fields.deskripsiSeo;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })() ?? []
        ).map((currentItem, currentIndex) => (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2Lwhp
            )}
            key={currentIndex}
          >
            {"Pharetra nulla ac adipiscing fringilla vel ridiculus interdum."}
          </div>
        ))}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  menuSampingSlider: ["menuSampingSlider", "img", "svg"],
  img: ["img"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  menuSampingSlider: "div";
  img: typeof p.PlasmicImg;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuSampingSlider__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuSampingSlider__VariantsArgs;
    args?: PlasmicMenuSampingSlider__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenuSampingSlider__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMenuSampingSlider__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMenuSampingSlider__ArgProps,
          internalVariantPropNames: PlasmicMenuSampingSlider__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuSampingSlider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "menuSampingSlider") {
    func.displayName = "PlasmicMenuSampingSlider";
  } else {
    func.displayName = `PlasmicMenuSampingSlider.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuSampingSlider = Object.assign(
  // Top-level PlasmicMenuSampingSlider renders the root element
  makeNodeComponent("menuSampingSlider"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicMenuSampingSlider
    internalVariantProps: PlasmicMenuSampingSlider__VariantProps,
    internalArgProps: PlasmicMenuSampingSlider__ArgProps
  }
);

export default PlasmicMenuSampingSlider;
/* prettier-ignore-end */
