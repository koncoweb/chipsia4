// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: s3EJm_4leMa2is

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: 38U0KJJ_izLvF0/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: u-J0rH0B-4/codeComponent
import Button2 from "../../Button2"; // plasmic-import: 8Gyy7YGh9_a/component
import Value from "../../Value"; // plasmic-import: 3bRucgJCclHNht/component
import Button from "../../Button"; // plasmic-import: z08NHQzGDufhl_/component
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: D4RbnlpRXg3/codeComponent
import ContainerProduk from "../../ContainerProduk"; // plasmic-import: Drd5MExytXv/component
import EmojiValueProps from "../../EmojiValueProps"; // plasmic-import: pVPTu88xjlQJ6D/component
import ProductCard from "../../ProductCard"; // plasmic-import: be4gyluQ_9OJzR/component
import Rating from "../../Rating"; // plasmic-import: JRf21XH4cTf7V-/component
import Footer from "../../Footer"; // plasmic-import: TjbIATQS4AqoQO/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: XZMu2sj2Xg/codeComponent

import { useScreenVariants as useScreenVariantsbvEuI4Yp87Tgs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BV_euI4yp87tgs/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chipsia.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: s3EJm_4leMa2is/css

import SpeakerphoneIcon from "./icons/PlasmicIcon__Speakerphone"; // plasmic-import: mKnZ2W7boGgxpZ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 0IKgn9gTvXS9bL/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: PS6DVWNrsATME2/icon
import LogoChipsiasvgIcon from "./icons/PlasmicIcon__LogoChipsiasvg"; // plasmic-import: Nnqp58GAr/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: vIBh7hkedAKVLS/icon
import PlaneIcon from "./icons/PlasmicIcon__Plane"; // plasmic-import: K0_Ms7xwxMqw9s/icon
import DocumentIcon from "./icons/PlasmicIcon__Document"; // plasmic-import: nmoxyqKZ1SSwmZ/icon
import LockIcon from "./icons/PlasmicIcon__Lock"; // plasmic-import: CO7fMjG8L3EKiN/icon
import MedalIcon from "./icons/PlasmicIcon__Medal"; // plasmic-import: rGAFqrIjwFkcZM/icon
import LeafIcon from "./icons/PlasmicIcon__Leaf"; // plasmic-import: sxhoIq9e99bhcn/icon
import MoneySvgrepoComsvgIcon from "./icons/PlasmicIcon__MoneySvgrepoComsvg"; // plasmic-import: ra_o6xwOHS/icon
import PeaceIcon from "./icons/PlasmicIcon__Peace"; // plasmic-import: X6eB28EOD3seMa/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  container42?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("container42");

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"main">;
  navBar?: p.Flex<typeof NavBar>;
  chipsiaHomeSlider?: p.Flex<typeof Slider>;
  slider?: p.Flex<typeof Slider>;
  h3?: p.Flex<"h3">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  button2?: p.Flex<typeof Button2>;
  container434?: p.Flex<"div">;
  dd?: p.Flex<"dd">;
  container4?: p.Flex<"dl">;
  dataProvider?: p.Flex<typeof DataProvider>;
  containerProduk?: p.Flex<typeof ContainerProduk>;
  h2?: p.Flex<"h2">;
  emojiValueProps?: p.Flex<typeof EmojiValueProps>;
  container42?: p.Flex<"div">;
  container5?: p.Flex<"div">;
  productCard7?: p.Flex<typeof ProductCard>;
  productCard8?: p.Flex<typeof ProductCard>;
  productCard9?: p.Flex<typeof ProductCard>;
  productCard10?: p.Flex<typeof ProductCard>;
  productCard11?: p.Flex<typeof ProductCard>;
  productCard12?: p.Flex<typeof ProductCard>;
  container6?: p.Flex<"div">;
  productCard13?: p.Flex<typeof ProductCard>;
  productCard14?: p.Flex<typeof ProductCard>;
  productCard15?: p.Flex<typeof ProductCard>;
  productCard16?: p.Flex<typeof ProductCard>;
  productCard17?: p.Flex<typeof ProductCard>;
  productCard18?: p.Flex<typeof ProductCard>;
  productCard19?: p.Flex<typeof ProductCard>;
  productCard20?: p.Flex<typeof ProductCard>;
  productCard21?: p.Flex<typeof ProductCard>;
  productCard22?: p.Flex<typeof ProductCard>;
  productCard23?: p.Flex<typeof ProductCard>;
  productCard24?: p.Flex<typeof ProductCard>;
  container433?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "productCard7.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard8.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard9.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard10.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard11.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard12.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard13.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard14.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard15.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard16.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard17.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard18.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard19.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard20.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard21.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard22.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard23.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard24.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const new$Queries = {
    queryArticles: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "qf7bUhfT7FamL4uVQRVVad",
            opId: "1de21f03-484d-47eb-a591-5484e977e716",
            userArgs: {},
            cacheKey: "plasmic.$.9VYvaEPP3.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    queryProducts: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "qf7bUhfT7FamL4uVQRVVad",
            opId: "aa832ab3-daac-4826-99ca-c3f9689ba31a",
            userArgs: {},
            cacheKey: "plasmic.$.vExoQJShv.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    queryGambarUtama: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "sEWePRBicGXUKP7Ruzme3E",
            opId: "d054e9ca-4668-40c2-ac4e-fa1478e0e853",
            userArgs: {},
            cacheKey: "plasmic.$.xvRL4D_So.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbvEuI4Yp87Tgs()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <main
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <section className={classNames(projectcss.all, sty.columns__oeqjp)}>
            <div className={classNames(projectcss.all, sty.column___9Mpuw)}>
              {true ? (
                <Slider
                  data-plasmic-name={"chipsiaHomeSlider"}
                  data-plasmic-override={overrides.chipsiaHomeSlider}
                  adaptiveHeight={false}
                  autoplay={true}
                  centerMode={true}
                  className={classNames(
                    "__wab_instance",
                    sty.chipsiaHomeSlider
                  )}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__emCyE)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/chipsia/images/indonesianTempehChipsExporterjpg.jpg",
                      fullWidth: 1640,
                      fullHeight: 924,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___9Y6Qq)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/chipsia/images/bananaChipsExporterjpg.jpg",
                      fullWidth: 1640,
                      fullHeight: 924,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__xzczp)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/chipsia/images/cassavaChipsExporterChipsiajpg.jpg",
                      fullWidth: 1640,
                      fullHeight: 924,
                      aspectRatio: undefined
                    }}
                  />
                </Slider>
              ) : null}
              <Slider
                data-plasmic-name={"slider"}
                data-plasmic-override={overrides.slider}
                autoplay={true}
                className={classNames("__wab_instance", sty.slider)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__cq9Qi)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["goToProductitem"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "navigation",
                                interactionUuid: "rmcoTTNPD",
                                componentUuid: "s3EJm_4leMa2is",
                                argName: "destination"
                              },
                              () =>
                                `/product/${"tempeh-chips"}-${"3BJr5npk8yGj8Db7NtJFJM"}`
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "rmcoTTNPD",
                              componentUuid: "s3EJm_4leMa2is"
                            },
                            () =>
                              (({ destination }) => {
                                __nextRouter?.push(destination);
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["goToProductitem"] === "object" &&
                      typeof $steps["goToProductitem"].then === "function"
                    ) {
                      $steps["goToProductitem"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "rmcoTTNPD",
                          componentUuid: "s3EJm_4leMa2is"
                        },
                        $steps["goToProductitem"]
                      );
                    }
                  }}
                  src={{
                    src: "/plasmic/chipsia/images/tempehChipsSupplierjpg.jpg",
                    fullWidth: 600,
                    fullHeight: 346,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__laVkf)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  onClick={async event => {
                    const $steps = {};
                    $steps["goToProductitem"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "navigation",
                                interactionUuid: "lIlQrjVNC",
                                componentUuid: "s3EJm_4leMa2is",
                                argName: "destination"
                              },
                              () =>
                                `/product/${"banana-chips"}-${"4XEDiTfqK7Ufq9wnVZw1cx"}`
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "lIlQrjVNC",
                              componentUuid: "s3EJm_4leMa2is"
                            },
                            () =>
                              (({ destination }) => {
                                __nextRouter?.push(destination);
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["goToProductitem"] === "object" &&
                      typeof $steps["goToProductitem"].then === "function"
                    ) {
                      $steps["goToProductitem"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "lIlQrjVNC",
                          componentUuid: "s3EJm_4leMa2is"
                        },
                        $steps["goToProductitem"]
                      );
                    }
                  }}
                  src={{
                    src: "/plasmic/chipsia/images/bananaChipsSupplierjpg.jpg",
                    fullWidth: 600,
                    fullHeight: 346,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__iHXjk)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["goToProductitem"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "navigation",
                                interactionUuid: "-cJ5FzKJQ",
                                componentUuid: "s3EJm_4leMa2is",
                                argName: "destination"
                              },
                              () =>
                                `/product/${"cassava-chips"}-${"YaiJdzg6HZH55Gg5gyGXf"}`
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "-cJ5FzKJQ",
                              componentUuid: "s3EJm_4leMa2is"
                            },
                            () =>
                              (({ destination }) => {
                                __nextRouter?.push(destination);
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["goToProductitem"] === "object" &&
                      typeof $steps["goToProductitem"].then === "function"
                    ) {
                      $steps["goToProductitem"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "-cJ5FzKJQ",
                          componentUuid: "s3EJm_4leMa2is"
                        },
                        $steps["goToProductitem"]
                      );
                    }
                  }}
                  src={{
                    src: "/plasmic/chipsia/images/cassavaChipsSupplierjpg.jpg",
                    fullWidth: 600,
                    fullHeight: 346,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__jXxIz)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["goToProductitem"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "navigation",
                                interactionUuid: "lW3rbBfuE",
                                componentUuid: "s3EJm_4leMa2is",
                                argName: "destination"
                              },
                              () =>
                                `/product/${"emping"}-${"1N0B9mP7o3hNoIaipymW9q"}`
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "lW3rbBfuE",
                              componentUuid: "s3EJm_4leMa2is"
                            },
                            () =>
                              (({ destination }) => {
                                __nextRouter?.push(destination);
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["goToProductitem"] === "object" &&
                      typeof $steps["goToProductitem"].then === "function"
                    ) {
                      $steps["goToProductitem"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "lW3rbBfuE",
                          componentUuid: "s3EJm_4leMa2is"
                        },
                        $steps["goToProductitem"]
                      );
                    }
                  }}
                  src={{
                    src: "/plasmic/chipsia/images/empingChipsSupplierjpg.jpg",
                    fullWidth: 600,
                    fullHeight: 346,
                    aspectRatio: undefined
                  }}
                />
              </Slider>
            </div>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__dz3Xn)}
              >
                <LoadingBoundary
                  className={classNames(
                    "__wab_instance",
                    sty.loadingBoundary__eLoGp
                  )}
                  loadingState={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pBygt
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.queryArticles.data.statusCode;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__h9Qq5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.columns___45KFy
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__jyWlJ
                                )}
                              >
                                <SpeakerphoneIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__aTxfO
                                  )}
                                  role={"img"}
                                />

                                <h3
                                  data-plasmic-name={"h3"}
                                  data-plasmic-override={overrides.h3}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3
                                  )}
                                >
                                  {"Latest News & Articles"}
                                </h3>
                              </div>
                            </div>
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            )
                              ? (
                                  (() => {
                                    try {
                                      return $queries.queryArticles.data
                                        .response.items;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })() ?? []
                                ).map((currentItem, currentIndex) => (
                                  <p.PlasmicLink
                                    data-plasmic-name={"link"}
                                    data-plasmic-override={overrides.link}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.link
                                    )}
                                    component={Link}
                                    href={`/articles/${(() => {
                                      try {
                                        return currentItem.fields.slug;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}-${(() => {
                                      try {
                                        return currentItem.sys.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}`}
                                    key={currentIndex}
                                    platform={"nextjs"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__kdVVw
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__cThpr
                                        )}
                                      >
                                        <p.PlasmicImg
                                          alt={""}
                                          className={classNames(sty.img__sYb4O)}
                                          displayHeight={"75px" as const}
                                          displayMaxHeight={"none" as const}
                                          displayMaxWidth={"100%" as const}
                                          displayMinHeight={"0" as const}
                                          displayMinWidth={"0" as const}
                                          displayWidth={"auto" as const}
                                          loading={"lazy" as const}
                                          src={(() => {
                                            try {
                                              return $queries.queryArticles.data
                                                .response.includes.Asset[
                                                currentIndex
                                              ].fields.file.url;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}
                                        />
                                      </div>
                                      {(
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? true
                                          : true
                                      ) ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.column__pewiL
                                          )}
                                        >
                                          <h1
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.h1,
                                              projectcss.__wab_text,
                                              sty.h1__ve6Np
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.fields
                                                    .judul;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "You won't believe what happens next.";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </h1>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__gmlB
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (() => {
                                                    const trimmedString =
                                                      currentItem.fields.deskripsiSeo
                                                        .trim()
                                                        .substring(0, 75);
                                                    return trimmedString.length <
                                                      currentItem.fields
                                                        .deskripsiSeo.length
                                                      ? trimmedString + "..."
                                                      : trimmedString;
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  </p.PlasmicLink>
                                ))
                              : null}
                          </div>
                        ) : null}
                        <Button2
                          data-plasmic-name={"button2"}
                          data-plasmic-override={overrides.button2}
                          className={classNames("__wab_instance", sty.button2)}
                          color={"softBlue" as const}
                          endIcon={
                            <RightArrowIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ebA47
                              )}
                              role={"img"}
                            />
                          }
                          link={`/articles`}
                          shape={"rounded" as const}
                          showEndIcon={true}
                          size={"compact" as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__p8Wgx
                            )}
                          >
                            {"Read All News "}
                          </div>
                        </Button2>
                      </React.Fragment>
                    )}
                  </ph.DataCtxReader>
                </LoadingBoundary>
              </p.Stack>
            ) : null}
          </section>
          <section className={classNames(projectcss.all, sty.section__hcIm1)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container434"}
              data-plasmic-override={overrides.container434}
              hasGap={true}
              className={classNames(projectcss.all, sty.container434)}
            >
              <Value
                center={true}
                children2={
                  <Button
                    className={classNames("__wab_instance", sty.button__rN5Lb)}
                    colors={"black" as const}
                    endIcon={
                      <RightArrowIcon
                        className={classNames(projectcss.all, sty.svg__kQAxJ)}
                        role={"img"}
                      />
                    }
                    rounded={true}
                    showEndIcon={true}
                    submitsForm={true}
                  >
                    {"More Detail About Us"}
                  </Button>
                }
                className={classNames("__wab_instance", sty.value__ks7Ra)}
                icon={
                  <LogoChipsiasvgIcon
                    className={classNames(projectcss.all, sty.svg__o5GI6)}
                    role={"img"}
                  />
                }
                topBottom={true}
                withButton={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gnRci
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__rqMAu
                        )}
                      >
                        {"Chipsia : Indonesian Chips Exporter"}
                      </h1>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
                <article
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.article__eeyIm
                  )}
                >
                  {
                    "Chipsia are trusted Indonesian Snacks exporters , we are supplier of Tempeh Chips, Banana Chips, Cassava Chips, Emping Chips and Tofu Chips with High Quality, Lowest Price, Professional Export Process and Easy Payment Process.\n\nAll chipsia Product are made following traditional and natural Indonesian chips making process, natural and free from added chemicals and preservatives. Chipsia product also using natural plant based ingredient which proved could deliver tasty flavor without any health risk."
                  }
                </article>
              </Value>
            </p.Stack>
          </section>
          <dd
            data-plasmic-name={"dd"}
            data-plasmic-override={overrides.dd}
            className={classNames(projectcss.all, sty.dd)}
          >
            <dl
              data-plasmic-name={"container4"}
              data-plasmic-override={overrides.container4}
              className={classNames(projectcss.all, sty.container4)}
            >
              <LoadingBoundary
                className={classNames(
                  "__wab_instance",
                  sty.loadingBoundary__m76Vd
                )}
                loadingState={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2N5Eg
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "Loading products ... ";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Loading...";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <DataProvider
                      data-plasmic-name={"dataProvider"}
                      data-plasmic-override={overrides.dataProvider}
                      className={classNames("__wab_instance", sty.dataProvider)}
                      data={(() => {
                        try {
                          return $queries.queryProducts.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {};
                          }
                          throw e;
                        }
                      })()}
                      name={"produk" as const}
                    >
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xOwPj
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aq86J
                              )}
                            >
                              {"Featured"}
                            </div>
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__rjbnl
                              )}
                              colors={"link" as const}
                              endIcon={
                                <RightArrowIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ccGw4
                                  )}
                                  role={"img"}
                                />
                              }
                              link={`/product`}
                              onClick={async event => {
                                const $steps = {};
                                $steps["goToProduct"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "navigation",
                                            interactionUuid: "l3ypXT7hg",
                                            componentUuid: "s3EJm_4leMa2is",
                                            argName: "destination"
                                          },
                                          () => `/product`
                                        )
                                      };
                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "navigation",
                                          interactionUuid: "l3ypXT7hg",
                                          componentUuid: "s3EJm_4leMa2is"
                                        },
                                        () =>
                                          (({ destination }) => {
                                            __nextRouter?.push(destination);
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["goToProduct"] === "object" &&
                                  typeof $steps["goToProduct"].then ===
                                    "function"
                                ) {
                                  $steps["goToProduct"] =
                                    await __wrapUserPromise(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "navigation",
                                        interactionUuid: "l3ypXT7hg",
                                        componentUuid: "s3EJm_4leMa2is"
                                      },
                                      $steps["goToProduct"]
                                    );
                                }
                              }}
                              rounded={true}
                              showEndIcon={true}
                              submitsForm={true}
                            >
                              {"See more"}
                            </Button>
                            <ContainerProduk
                              data-plasmic-name={"containerProduk"}
                              data-plasmic-override={overrides.containerProduk}
                              className={classNames(
                                "__wab_instance",
                                sty.containerProduk
                              )}
                            />
                          </div>
                        )}
                      </ph.DataCtxReader>
                    </DataProvider>
                  )}
                </ph.DataCtxReader>
              </LoadingBoundary>
            </dl>
          </dd>
          <article className={classNames(projectcss.all, sty.article__qcNxB)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__p2TxH)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___8OSC)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bn0Te)}
                >
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2
                    )}
                  >
                    {
                      "Chipsia is Committed to Becoming the Best Traditional Indonesian snack Exporter "
                    }
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vgF1N
                    )}
                  >
                    {
                      "Supplier and Exporter of Original Healthy Indonesian Snacks are our main Business. We are ready to serve your demand for original Indonesian Snacks such as Tempeh Chips, Banana Chips, Cassava Chips, Emping Chips, and Tofu Chips\nCall us today and we discussed how to help you fulfill your demand, you can connect with us by email or WhatsApp"
                    }
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5Ds5)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ohDRi
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"3 "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"for"}
                        </span>
                        <React.Fragment>{" $169"}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  <Button
                    colors={"black" as const}
                    endIcon={
                      <RightArrowIcon
                        className={classNames(projectcss.all, sty.svg__tMFx)}
                        role={"img"}
                      />
                    }
                    rounded={true}
                    showEndIcon={true}
                    size={"large" as const}
                    submitsForm={true}
                  >
                    {"Shop sale"}
                  </Button>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </article>
          <EmojiValueProps
            data-plasmic-name={"emojiValueProps"}
            data-plasmic-override={overrides.emojiValueProps}
            className={classNames("__wab_instance", sty.emojiValueProps)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__gagzD)}
            >
              <div className={classNames(projectcss.all, sty.column__dw88N)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__sts7S
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__xvrZt)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value___203V2)}
                  icon={
                    <PlaneIcon
                      className={classNames(projectcss.all, sty.svg__b2Lbk)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eHhhd
                    )}
                  >
                    {"worldwide shipping to any country"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___57Vmq
                    )}
                  >
                    {
                      "We are Ready to Ship all of our products Worldwide by land, sea, and air. our packaging guarantee product is in prime quality after you received "
                    }
                  </div>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__xMaY1)}>
                <Value
                  children2={
                    <Button
                      className={classNames("__wab_instance", sty.button__yzJt)}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6Uqi0
                          )}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__ujHlI)}
                  icon={
                    <DocumentIcon
                      className={classNames(projectcss.all, sty.svg__dmCrp)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___00Bsz
                    )}
                  >
                    {"Your satisfaction guaranteed"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yeCfI
                    )}
                  >
                    {
                      "Our export process is professional so you do not have to worry about product quality, we are experienced in the export process"
                    }
                  </div>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__sYbo)}>
                <Value
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__psoJi
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg___2Vir)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__kw2JU)}
                  icon={
                    <LockIcon
                      className={classNames(projectcss.all, sty.svg__y7RaT)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uFlqi
                    )}
                  >
                    {"Secure and easy payments process"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gKbaL
                    )}
                  >
                    {
                      "Don't worry about payment, we accept many forms of international payment so you can fulfill your demand without the high cost"
                    }
                  </div>
                </Value>
              </div>
            </p.Stack>
          </EmojiValueProps>
          <section className={classNames(projectcss.all, sty.section__l4GG)}>
            <div
              data-plasmic-name={"container42"}
              data-plasmic-override={overrides.container42}
              className={classNames(projectcss.all, sty.container42)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yceq)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iCaOj
                      )}
                    >
                      {"Why Import From Us ?"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__rUsA6
                      )}
                      colors={"link" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__svyDa)}
                          role={"img"}
                        />
                      }
                      link={`/product/why-choose-chipsia`}
                      showEndIcon={true}
                      submitsForm={true}
                    >
                      {"See more"}
                    </Button>
                  </div>
                ),
                value: args.container42
              })}
            </div>
            <div
              data-plasmic-name={"container5"}
              data-plasmic-override={overrides.container5}
              className={classNames(projectcss.all, sty.container5)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wTvhD)}
                >
                  <ProductCard
                    data-plasmic-name={"productCard7"}
                    data-plasmic-override={overrides.productCard7}
                    img={{
                      src: "/plasmic/chipsia/images/shoe14.png",
                      fullWidth: 840,
                      fullHeight: 840,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard7",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dYsT7
                      )}
                    >
                      {"ADIDAS ULTRABOOST DNA X LEGO\u00ae PLATES SHOES"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hg36U
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard8"}
                    data-plasmic-override={overrides.productCard8}
                    className={classNames("__wab_instance", sty.productCard8)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe15.png",
                      fullWidth: 864,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard8",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c0JBa
                      )}
                    >
                      {"Nike Air Zoom Pegasus 38"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vgYf7
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard9"}
                    data-plasmic-override={overrides.productCard9}
                    className={classNames("__wab_instance", sty.productCard9)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe16.png",
                      fullWidth: 840,
                      fullHeight: 840,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard9",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mMbwi
                      )}
                    >
                      {"Club C 85 Vintage Men's Shoes"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___22Pbe
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard10"}
                    data-plasmic-override={overrides.productCard10}
                    className={classNames("__wab_instance", sty.productCard10)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe17.png",
                      fullWidth: 864,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard10",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qIUp
                      )}
                    >
                      {"Nike Air Max Genome"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ytPj
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard11"}
                    data-plasmic-override={overrides.productCard11}
                    className={classNames("__wab_instance", sty.productCard11)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe18.png",
                      fullWidth: 840,
                      fullHeight: 840,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard11",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8Sc1Z
                      )}
                    >
                      {"ULTRABOOST DNA 1.0 SHOES"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__arsjX
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </ProductCard>
                  <ProductCard
                    data-plasmic-name={"productCard12"}
                    data-plasmic-override={overrides.productCard12}
                    className={classNames("__wab_instance", sty.productCard12)}
                    img={{
                      src: "/plasmic/chipsia/images/shoe19.png",
                      fullWidth: 864,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                    onEntryidvarChange={p.generateStateOnChangeProp($state, [
                      "productCard12",
                      "entryidvar"
                    ])}
                    tags={
                      <Button
                        colors={"lightGray" as const}
                        size={"small" as const}
                        submitsForm={true}
                      >
                        {"New"}
                      </Button>
                    }
                  />
                </p.Stack>
              ) : null}
            </div>
          </section>
          {true ? (
            <section className={classNames(projectcss.all, sty.section__inb7D)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"container6"}
                  data-plasmic-override={overrides.container6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.container6)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__medKw)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iUtMr
                      )}
                    >
                      {"Categories"}
                    </div>
                    <Button
                      className={classNames("__wab_instance", sty.button__oEp0)}
                      states={"active" as const}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fEpz
                        )}
                      >
                        {"All"}
                      </div>
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___4MFIq
                      )}
                      submitsForm={true}
                    >
                      {"New"}
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__tOlGh
                      )}
                      submitsForm={true}
                    >
                      {"Womens"}
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__g3DUm
                      )}
                      submitsForm={true}
                    >
                      {"Mens"}
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__eORxm
                      )}
                      submitsForm={true}
                    >
                      {"Kids"}
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__wljSp
                      )}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rCsN
                        )}
                      >
                        {"On sale"}
                      </div>
                    </Button>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___9Iojd)}
                  >
                    <ProductCard
                      data-plasmic-name={"productCard13"}
                      data-plasmic-override={overrides.productCard13}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard13
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe8.png",
                        fullWidth: 864,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard13",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tdIdm
                        )}
                      >
                        {"Nike Air Zoom Pegasus 38 Limited Edition"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kty8Q
                        )}
                      >
                        {"Women's Running Shoe"}
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard14"}
                      data-plasmic-override={overrides.productCard14}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard14
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe7.png",
                        fullWidth: 840,
                        fullHeight: 840,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard14",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fCJ3
                        )}
                      >
                        {"NMD_R1 SHOES"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7AQ62
                        )}
                      >
                        {
                          "Continue the NMD legacy in these adidas NMD_R1 Shoes."
                        }
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard15"}
                      data-plasmic-override={overrides.productCard15}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard15
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe6.png",
                        fullWidth: 320,
                        fullHeight: 320,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard15",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__epfqG
                        )}
                      >
                        {"Question Low Men's Basketball Shoes"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mpMy7
                        )}
                      >
                        {"Lace up fierce baller style."}
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard16"}
                      data-plasmic-override={overrides.productCard16}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard16
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe5.png",
                        fullWidth: 2000,
                        fullHeight: 2000,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard16",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__me4D
                        )}
                      >
                        {"Cali Women's Sneakers"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lj9X7
                        )}
                      >
                        {"A sport style turned street classic."}
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard17"}
                      data-plasmic-override={overrides.productCard17}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard17
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe4.png",
                        fullWidth: 1024,
                        fullHeight: 768,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard17",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rz0Lz
                        )}
                      >
                        {"MAGIC SPEED"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Zw69
                        )}
                      >
                        {"mMade for racing or regular training runs."}
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard18"}
                      data-plasmic-override={overrides.productCard18}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard18
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe3.png",
                        fullWidth: 964,
                        fullHeight: 898,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard18",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a83QP
                        )}
                      >
                        {"Pride Chuck Taylor All Star"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dMcwj
                        )}
                      >
                        {"If you can dream it, you can build it."}
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard19"}
                      data-plasmic-override={overrides.productCard19}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard19
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe2.png",
                        fullWidth: 864,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard19",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zedS3
                        )}
                      >
                        {"Nike Air Zoom Pegasus 38"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q50R
                        )}
                      >
                        {"Your workhorse with wings returns."}
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard20"}
                      data-plasmic-override={overrides.productCard20}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard20
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe9.png",
                        fullWidth: 1024,
                        fullHeight: 768,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard20",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yXyVo
                        )}
                      >
                        {"GEL-Nimbus 22 Retro Tokyo"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rvMnF
                        )}
                      >
                        {"Enjoy comfort with each stride."}
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard21"}
                      data-plasmic-override={overrides.productCard21}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard21
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe10.png",
                        fullWidth: 964,
                        fullHeight: 898,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard21",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sfAKz
                        )}
                      >
                        {"A Bug's World Chuck Taylor All Star"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iZv3D
                        )}
                      >
                        {"Allover glow-in-the-dark bug prints."}
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard22"}
                      data-plasmic-override={overrides.productCard22}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard22
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe11.png",
                        fullWidth: 766,
                        fullHeight: 766,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard22",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sUpNq
                        )}
                      >
                        {"NMD_R1 SHOES"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ecOTn
                        )}
                      >
                        {
                          "Effortlessly step up your look than a pop of animal print."
                        }
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard23"}
                      data-plasmic-override={overrides.productCard23}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard23
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe12.png",
                        fullWidth: 2000,
                        fullHeight: 2000,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard23",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sBprc
                        )}
                      >
                        {"Suede Teams Little Kids' Shoes"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ev3MF
                        )}
                      >
                        {"Worn by the icons of every generation."}
                      </div>
                    </ProductCard>
                    <ProductCard
                      data-plasmic-name={"productCard24"}
                      data-plasmic-override={overrides.productCard24}
                      className={classNames(
                        "__wab_instance",
                        sty.productCard24
                      )}
                      img={{
                        src: "/plasmic/chipsia/images/shoe13.png",
                        fullWidth: 840,
                        fullHeight: 840,
                        aspectRatio: undefined
                      }}
                      onEntryidvarChange={p.generateStateOnChangeProp($state, [
                        "productCard24",
                        "entryidvar"
                      ])}
                      small={true}
                      tags={
                        <Button
                          colors={"lightGray" as const}
                          size={"small" as const}
                          submitsForm={true}
                        >
                          {"New"}
                        </Button>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__adlc4
                        )}
                      >
                        {"SUPERSTAR 360 PRIMEBLUE SANDALS"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ciYz3
                        )}
                      >
                        {"Your workhorse with wings returns."}
                      </div>
                    </ProductCard>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </section>
          ) : null}
          <section className={classNames(projectcss.all, sty.section___1Qg8R)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container433"}
              data-plasmic-override={overrides.container433}
              hasGap={true}
              className={classNames(projectcss.all, sty.container433)}
            >
              <div className={classNames(projectcss.all, sty.column__bUrZj)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__mvUh5
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__jGy3B)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__yjwMg)}
                  icon={
                    <MedalIcon
                      className={classNames(projectcss.all, sty.svg___4O8Gv)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oCK0
                    )}
                  >
                    {"We guarantee everything we sell."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6NlMg
                    )}
                  >
                    {
                      "Every product we sell, tempeh chips, banana chips, cassava chips, and emping chips also other products, are made from fresh ingredients with legacy recipes. so you will be satisfied with the product you received"
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__wbdbs)}
                    colors={"link" as const}
                    submitsForm={true}
                  >
                    {"View guarantee"}
                  </Button>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__s3T2B)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__hmRlO
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2ONuh
                          )}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value___9Mm8A)}
                  icon={
                    <LeafIcon
                      className={classNames(projectcss.all, sty.svg__mbboq)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__padit
                    )}
                  >
                    {"100 % organic and Plant based"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__drfYe
                    )}
                  >
                    {
                      "The market for our product is increasing rapidly in your country. Our chips Product made from fresh and natural plant-based ingredients, so it's healthy and can become an alternative for people who are vegetarian or just want to consume healthy but  tasty snacks"
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__cJuhD)}
                    colors={"link" as const}
                    submitsForm={true}
                  />
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__oGbl1)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__t3ZoE
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__rHyiu)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__dubeg)}
                  icon={
                    <MoneySvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__x39V4)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ruz1O
                    )}
                  >
                    {"Reap High Profit by becoming importer"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hV6Y
                    )}
                  >
                    {
                      "Our product is in high demand for the export market, now it's your turn to reap high profit by becoming an importer of our products such as tempeh chips, banana chips, emping chips, and cassava chips in your country "
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__czNkX)}
                    colors={"link" as const}
                    submitsForm={true}
                  />
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__tTigI)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ck4Wx
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__bZ0Sd)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__h5EUj)}
                  icon={
                    <PeaceIcon
                      className={classNames(projectcss.all, sty.svg__gvTVx)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nlAgm
                    )}
                  >
                    {"We give back for every sale."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2SE0U
                    )}
                  >
                    {
                      "we give back to our people. By Importing from us you also contribute to local communities of traditional Indonesian food producers, because we only produce our product by empowering local Indonesian people"
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__lRtHv)}
                    colors={"link" as const}
                    submitsForm={true}
                  />
                </Value>
              </div>
            </p.Stack>
          </section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </main>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "chipsiaHomeSlider",
    "slider",
    "h3",
    "link",
    "button2",
    "container434",
    "dd",
    "container4",
    "dataProvider",
    "containerProduk",
    "h2",
    "emojiValueProps",
    "container42",
    "container5",
    "productCard7",
    "productCard8",
    "productCard9",
    "productCard10",
    "productCard11",
    "productCard12",
    "container6",
    "productCard13",
    "productCard14",
    "productCard15",
    "productCard16",
    "productCard17",
    "productCard18",
    "productCard19",
    "productCard20",
    "productCard21",
    "productCard22",
    "productCard23",
    "productCard24",
    "container433",
    "footer"
  ],
  navBar: ["navBar"],
  chipsiaHomeSlider: ["chipsiaHomeSlider"],
  slider: ["slider"],
  h3: ["h3"],
  link: ["link"],
  button2: ["button2"],
  container434: ["container434"],
  dd: ["dd", "container4", "dataProvider", "containerProduk"],
  container4: ["container4", "dataProvider", "containerProduk"],
  dataProvider: ["dataProvider", "containerProduk"],
  containerProduk: ["containerProduk"],
  h2: ["h2"],
  emojiValueProps: ["emojiValueProps"],
  container42: ["container42"],
  container5: [
    "container5",
    "productCard7",
    "productCard8",
    "productCard9",
    "productCard10",
    "productCard11",
    "productCard12"
  ],
  productCard7: ["productCard7"],
  productCard8: ["productCard8"],
  productCard9: ["productCard9"],
  productCard10: ["productCard10"],
  productCard11: ["productCard11"],
  productCard12: ["productCard12"],
  container6: [
    "container6",
    "productCard13",
    "productCard14",
    "productCard15",
    "productCard16",
    "productCard17",
    "productCard18",
    "productCard19",
    "productCard20",
    "productCard21",
    "productCard22",
    "productCard23",
    "productCard24"
  ],
  productCard13: ["productCard13"],
  productCard14: ["productCard14"],
  productCard15: ["productCard15"],
  productCard16: ["productCard16"],
  productCard17: ["productCard17"],
  productCard18: ["productCard18"],
  productCard19: ["productCard19"],
  productCard20: ["productCard20"],
  productCard21: ["productCard21"],
  productCard22: ["productCard22"],
  productCard23: ["productCard23"],
  productCard24: ["productCard24"],
  container433: ["container433"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "main";
  navBar: typeof NavBar;
  chipsiaHomeSlider: typeof Slider;
  slider: typeof Slider;
  h3: "h3";
  link: "a";
  button2: typeof Button2;
  container434: "div";
  dd: "dd";
  container4: "dl";
  dataProvider: typeof DataProvider;
  containerProduk: typeof ContainerProduk;
  h2: "h2";
  emojiValueProps: typeof EmojiValueProps;
  container42: "div";
  container5: "div";
  productCard7: typeof ProductCard;
  productCard8: typeof ProductCard;
  productCard9: typeof ProductCard;
  productCard10: typeof ProductCard;
  productCard11: typeof ProductCard;
  productCard12: typeof ProductCard;
  container6: "div";
  productCard13: typeof ProductCard;
  productCard14: typeof ProductCard;
  productCard15: typeof ProductCard;
  productCard16: typeof ProductCard;
  productCard17: typeof ProductCard;
  productCard18: typeof ProductCard;
  productCard19: typeof ProductCard;
  productCard20: typeof ProductCard;
  productCard21: typeof ProductCard;
  productCard22: typeof ProductCard;
  productCard23: typeof ProductCard;
  productCard24: typeof ProductCard;
  container433: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    chipsiaHomeSlider: makeNodeComponent("chipsiaHomeSlider"),
    slider: makeNodeComponent("slider"),
    h3: makeNodeComponent("h3"),
    link: makeNodeComponent("link"),
    button2: makeNodeComponent("button2"),
    container434: makeNodeComponent("container434"),
    dd: makeNodeComponent("dd"),
    container4: makeNodeComponent("container4"),
    dataProvider: makeNodeComponent("dataProvider"),
    containerProduk: makeNodeComponent("containerProduk"),
    h2: makeNodeComponent("h2"),
    emojiValueProps: makeNodeComponent("emojiValueProps"),
    container42: makeNodeComponent("container42"),
    container5: makeNodeComponent("container5"),
    productCard7: makeNodeComponent("productCard7"),
    productCard8: makeNodeComponent("productCard8"),
    productCard9: makeNodeComponent("productCard9"),
    productCard10: makeNodeComponent("productCard10"),
    productCard11: makeNodeComponent("productCard11"),
    productCard12: makeNodeComponent("productCard12"),
    container6: makeNodeComponent("container6"),
    productCard13: makeNodeComponent("productCard13"),
    productCard14: makeNodeComponent("productCard14"),
    productCard15: makeNodeComponent("productCard15"),
    productCard16: makeNodeComponent("productCard16"),
    productCard17: makeNodeComponent("productCard17"),
    productCard18: makeNodeComponent("productCard18"),
    productCard19: makeNodeComponent("productCard19"),
    productCard20: makeNodeComponent("productCard20"),
    productCard21: makeNodeComponent("productCard21"),
    productCard22: makeNodeComponent("productCard22"),
    productCard23: makeNodeComponent("productCard23"),
    productCard24: makeNodeComponent("productCard24"),
    container433: makeNodeComponent("container433"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Chipsia: Tempe Chips Banana Chips Cassava Chips & Emping supplier",
      description:
        "Chipsia are trusted Indonesian Snacks exporters , we are supplier of Tempeh Chips, Banana Chips, Cassava Chips, Emping Chips and Tofu Chips with High Quality, Lowest Price, Professional Export Process and Easy Payment Process.",
      ogImageSrc:
        "https://site-assets.plasmic.app/54f3ce18d37d548646a3665708ddddc8.jpg",
      canonical: "https://www.chipsia.com"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
