// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: gWt9XtaVK6Q0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { PlasmicHead } from "@plasmicapp/react-web"; // plasmic-import: G3sjWhr-Dq/codeComponent
import NavBar from "../../NavBar"; // plasmic-import: 38U0KJJ_izLvF0/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import Contactsection from "../../Contactsection"; // plasmic-import: wfTulyuJy5S/component
import ProductCard from "../../ProductCard"; // plasmic-import: be4gyluQ_9OJzR/component
import Button from "../../Button"; // plasmic-import: z08NHQzGDufhl_/component
import Rating from "../../Rating"; // plasmic-import: JRf21XH4cTf7V-/component
import Value from "../../Value"; // plasmic-import: 3bRucgJCclHNht/component
import Footer from "../../Footer"; // plasmic-import: TjbIATQS4AqoQO/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: XZMu2sj2Xg/codeComponent

import { useScreenVariants as useScreenVariantsbvEuI4Yp87Tgs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BV_euI4yp87tgs/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chipsia.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicProductitem.module.css"; // plasmic-import: gWt9XtaVK6Q0/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: vIBh7hkedAKVLS/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: PS6DVWNrsATME2/icon
import MedalIcon from "./icons/PlasmicIcon__Medal"; // plasmic-import: rGAFqrIjwFkcZM/icon
import LeafIcon from "./icons/PlasmicIcon__Leaf"; // plasmic-import: sxhoIq9e99bhcn/icon
import MoneySvgrepoComsvgIcon from "./icons/PlasmicIcon__MoneySvgrepoComsvg"; // plasmic-import: ra_o6xwOHS/icon
import PeaceIcon from "./icons/PlasmicIcon__Peace"; // plasmic-import: X6eB28EOD3seMa/icon

createPlasmicElementProxy;

export type PlasmicProductitem__VariantMembers = {};
export type PlasmicProductitem__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductitem__VariantsArgs;
export const PlasmicProductitem__VariantProps = new Array<VariantPropType>();

export type PlasmicProductitem__ArgsType = {
  container42?: React.ReactNode;
};
type ArgPropType = keyof PlasmicProductitem__ArgsType;
export const PlasmicProductitem__ArgProps = new Array<ArgPropType>(
  "container42"
);

export type PlasmicProductitem__OverridesType = {
  root?: p.Flex<"main">;
  pageMetadataOverride?: p.Flex<typeof PlasmicHead>;
  navBar?: p.Flex<typeof NavBar>;
  container4?: p.Flex<"div">;
  productNameH1?: p.Flex<"h1">;
  slider?: p.Flex<typeof Slider>;
  freeBox?: p.Flex<"div">;
  descriptionH2Header?: p.Flex<"h2">;
  ingredientH2?: p.Flex<"h2">;
  ingredientsimage?: p.Flex<typeof p.PlasmicImg>;
  makingProcessesH2?: p.Flex<"h2">;
  container?: p.Flex<"div">;
  productCard?: p.Flex<typeof ProductCard>;
  productCard2?: p.Flex<typeof ProductCard>;
  ul?: p.Flex<"ul">;
  container42?: p.Flex<"div">;
  container5?: p.Flex<"div">;
  container433?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultProductitemProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductitem__RenderFunc(props: {
  variants: PlasmicProductitem__VariantsArgs;
  args: PlasmicProductitem__ArgsType;
  overrides: PlasmicProductitem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "productCard.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard2.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const new$Queries = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "32yzKuv9KNcYw8vxYbcdVa",
            opId: "bab74e9f-ae7b-4f3b-8d54-b7621c2bbf13",
            userArgs: {
              path: [$ctx.params.productid]
            },
            cacheKey: "plasmic.$.e-T_fbmL7.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    componentData: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "sEWePRBicGXUKP7Ruzme3E",
            opId: "895fca92-0f19-40e0-9dc9-4de5ea25539f",
            userArgs: {
              path: [
                $queries.query.data.response.items[0].fields
                  .productFeaturedImage.sys.id
              ]
            },
            cacheKey: "plasmic.$.ZWTWwtGqm.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    componentData2: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "sEWePRBicGXUKP7Ruzme3E",
            opId: "06b31a52-fade-47ff-9322-92788cc04949",
            userArgs: {
              path: [
                $queries.query.data.response.items[0].fields.ingredientImage.sys
                  .id
              ]
            },
            cacheKey: "plasmic.$.fI2FULVng.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    componentData4: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "sEWePRBicGXUKP7Ruzme3E",
            opId: "669d3570-63c9-4c5c-b896-630a1fd1ad83",
            userArgs: {
              path: [
                $queries.query.data.response.items[0].fields
                  .makingProcessImage[0].sys.id
              ]
            },
            cacheKey: "plasmic.$.dlEHFyQgJ.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    componentData3: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "sEWePRBicGXUKP7Ruzme3E",
            opId: "895fca92-0f19-40e0-9dc9-4de5ea25539f",
            userArgs: {
              path: [
                $queries.query.data.response.items[0].fields
                  .productFeaturedImage.sys.id
              ]
            },
            cacheKey: "plasmic.$.fTWxAmAMa.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbvEuI4Yp87Tgs()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <meta
          key="description"
          name="description"
          content={PlasmicProductitem.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicProductitem.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicProductitem.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicProductitem.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicProductitem.pageMetadata.ogImageSrc}
        />
        <link
          ref="canonical"
          href={PlasmicProductitem.pageMetadata.canonical}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <main
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <PlasmicHead
              data-plasmic-name={"pageMetadataOverride"}
              data-plasmic-override={overrides.pageMetadataOverride}
              className={classNames("__wab_instance", sty.pageMetadataOverride)}
              description={(() => {
                try {
                  return (
                    "Profit by Importing " +
                    $queries.query.data.response.items[0].fields.productName +
                    " to your Country ! " +
                    $queries.query.data.response.items[0].fields.productDescription.content[0].content[0].value.slice(
                      0,
                      120
                    )
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              image={(() => {
                try {
                  return $queries.componentData.data.response.fields.file.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              title={(() => {
                try {
                  return (
                    "Profit by Importing " +
                    $queries.query.data.response.items[0].fields.productName +
                    " to your Country ! - " +
                    $queries.query.data.response.items[0].fields.productName +
                    " exporter | Chipsia"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <section className={classNames(projectcss.all, sty.section__kLx7S)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container4"}
              data-plasmic-override={overrides.container4}
              hasGap={true}
              className={classNames(projectcss.all, sty.container4)}
            >
              <h1
                data-plasmic-name={"productNameH1"}
                data-plasmic-override={overrides.productNameH1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.productNameH1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data.response.items[0].fields
                        .productName;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "You won't believe what happens next.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h1>
              <div className={classNames(projectcss.all, sty.columns__dpyhB)}>
                <div className={classNames(projectcss.all, sty.column__ypabH)}>
                  <p.PlasmicImg
                    alt={(() => {
                      try {
                        return $queries.componentData.data.response.fields
                          .description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    className={classNames(sty.img__kb7Qx)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={(() => {
                      try {
                        return $queries.componentData.data.response.fields.file
                          .url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <Slider
                    data-plasmic-name={"slider"}
                    data-plasmic-override={overrides.slider}
                    autoplay={true}
                    centerMode={true}
                    centerPadding={"50" as const}
                    className={classNames("__wab_instance", sty.slider)}
                    dots={true}
                  >
                    {(
                      (() => {
                        try {
                          return $queries.query.data.response.includes.Asset;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <div
                        data-plasmic-name={"freeBox"}
                        data-plasmic-override={overrides.freeBox}
                        className={classNames(projectcss.all, sty.freeBox)}
                        key={currentIndex}
                      >
                        <p.PlasmicImg
                          alt={(() => {
                            try {
                              return currentItem.fields.description;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(sty.img___9Leme)}
                          displayHeight={"200px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={(() => {
                            try {
                              return currentItem.fields.file.url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "https://static1.plasmic.app/components/react-slick/slide1.png";
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    ))}
                  </Slider>
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__pw4NP)}
                >
                  <h2
                    data-plasmic-name={"descriptionH2Header"}
                    data-plasmic-override={overrides.descriptionH2Header}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.descriptionH2Header
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            "Profit by Importing " +
                            $queries.query.data.response.items[0].fields
                              .productName +
                            " to your Country !"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You won't believe what happens next.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h2>
                  {(
                    (() => {
                      try {
                        return $queries.query.data.response.items[0].fields
                          .productDescription.content;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })() ?? []
                  ).map((currentItem, currentIndex) => (
                    <article
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.article__cstHj
                      )}
                      key={currentIndex}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.content[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </article>
                  ))}

                  <Contactsection
                    className={classNames(
                      "__wab_instance",
                      sty.contactsection__wCkMa
                    )}
                  />
                </p.Stack>
              </div>
              <section
                className={classNames(projectcss.all, sty.section__xq7Zj)}
              >
                <h2
                  data-plasmic-name={"ingredientH2"}
                  data-plasmic-override={overrides.ingredientH2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.ingredientH2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "Ingredients of " +
                          $queries.query.data.response.items[0].fields
                            .productName
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Ingredients";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h2>
                <div className={classNames(projectcss.all, sty.columns__a1Dn)}>
                  <div
                    className={classNames(projectcss.all, sty.column__h8OzT)}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"ingredientsimage"}
                      data-plasmic-override={overrides.ingredientsimage}
                      alt={""}
                      className={classNames(sty.ingredientsimage)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      loading={"lazy" as const}
                      src={(() => {
                        try {
                          return $queries.componentData2.data.response.fields
                            .file.url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column___5NYua)}
                  >
                    {(
                      (() => {
                        try {
                          return $queries.query.data.response.items[0].fields
                            .ingredient.content;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <article
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.article__oD4R
                        )}
                        key={currentIndex}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.content[0].value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </article>
                    ))}
                  </p.Stack>
                </div>
              </section>
              <section
                className={classNames(projectcss.all, sty.section__txffV)}
              >
                <h2
                  data-plasmic-name={"makingProcessesH2"}
                  data-plasmic-override={overrides.makingProcessesH2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.makingProcessesH2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "Making Process of " +
                          $queries.query.data.response.items[0].fields
                            .productName
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Making Processes";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h2>
                <div className={classNames(projectcss.all, sty.columns__uAXwO)}>
                  <div className={classNames(projectcss.all, sty.column__e3Zl)}>
                    <p.PlasmicImg
                      alt={(() => {
                        try {
                          return $queries.componentData4.data.response.fields
                            .description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      className={classNames(sty.img__atm8G)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={(() => {
                        try {
                          return $queries.componentData4.data.response.fields
                            .file.url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <p.Stack
                    as={"article"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__nq0Ov)}
                  >
                    {(
                      (() => {
                        try {
                          return $queries.query.data.response.items[0].fields
                            .makingProcess.content;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__okzmo
                        )}
                        key={currentIndex}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.content[0].value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ))}
                  </p.Stack>
                </div>
              </section>
              <Contactsection
                className={classNames(
                  "__wab_instance",
                  sty.contactsection___5GH4T
                )}
                query={$queries.query}
              />
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(projectcss.all, sty.container)}
            >
              {true ? (
                <ProductCard
                  data-plasmic-name={"productCard"}
                  data-plasmic-override={overrides.productCard}
                  className={classNames("__wab_instance", sty.productCard)}
                  img={{
                    src: "/plasmic/chipsia/images/shoe18.png",
                    fullWidth: 840,
                    fullHeight: 840,
                    aspectRatio: undefined
                  }}
                  onEntryidvarChange={p.generateStateOnChangeProp($state, [
                    "productCard",
                    "entryidvar"
                  ])}
                  rating={
                    <Rating
                      className={classNames(
                        "__wab_instance",
                        sty.rating___26Wzy
                      )}
                      rating={"five" as const}
                    />
                  }
                  tags={
                    <Button
                      colors={"lightGray" as const}
                      size={"small" as const}
                      submitsForm={true}
                    >
                      {"New"}
                    </Button>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bFPz
                    )}
                  >
                    {"ULTRABOOST DNA 1.0 SHOES"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ogcTv
                    )}
                  >
                    {"If you can dream it, you can build it."}
                  </div>
                </ProductCard>
              ) : null}
              {true ? (
                <ProductCard
                  data-plasmic-name={"productCard2"}
                  data-plasmic-override={overrides.productCard2}
                  className={classNames("__wab_instance", sty.productCard2)}
                  img={{
                    src: "/plasmic/chipsia/images/shoe19.png",
                    fullWidth: 864,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                  onEntryidvarChange={p.generateStateOnChangeProp($state, [
                    "productCard2",
                    "entryidvar"
                  ])}
                  rating={
                    <Rating
                      className={classNames(
                        "__wab_instance",
                        sty.rating__xdXJi
                      )}
                      rating={"threeHalf" as const}
                    />
                  }
                  tags={
                    <Button
                      colors={"lightGray" as const}
                      size={"small" as const}
                      submitsForm={true}
                    >
                      {"New"}
                    </Button>
                  }
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wQcmt
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <ul
                      data-plasmic-name={"ul"}
                      data-plasmic-override={overrides.ul}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.ul
                      )}
                    >
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__vh2UJ
                        )}
                      >
                        {
                          "Tempeh Chips: Made from fermented soybeans, tempeh is a traditional Indonesian food that is packed with protein and nutrients. Our tempeh chips are crispy, savory, and perfect for snacking.\n"
                        }
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__gRmeZ
                        )}
                      >
                        {
                          "Emping Chips: Emping is a type of Indonesian chip made from melinjo nuts. These nuts have a unique flavor that is slightly bitter and nutty. Our emping chips are a delicious and healthy snack that you won\u2019t find anywhere else.\n"
                        }
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___3WkI
                        )}
                      >
                        {
                          "Cassava Chips: Cassava is a root vegetable that is a staple food in many parts of the world. Our cassava chips are made from thinly sliced cassava that is fried to perfection. They\u2019re crispy, flavorful, and perfect for dipping.\n"
                        }
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___6NCu
                        )}
                      >
                        {
                          "Banana Chips: Who doesn\u2019t love bananas? Our banana chips are made from ripe bananas that are sliced and fried until crispy. They\u2019re sweet, crunchy, and perfect for satisfying your sweet tooth.\n\nOn this page, you\u2019ll find news and articles about these delicious snacks, as well as information about our company and our commitment to quality. So sit back, grab a bag of Chipsia chips, and discover the world of Indonesian snacks."
                        }
                      </li>
                    </ul>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </p.Stack>
          </section>
          <section className={classNames(projectcss.all, sty.section__ypFyF)}>
            <div
              data-plasmic-name={"container42"}
              data-plasmic-override={overrides.container42}
              className={classNames(projectcss.all, sty.container42)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qLwBj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u8MVv
                      )}
                    >
                      {"Why Import From Us ?"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__xGPwu
                      )}
                      colors={"link" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__xqSH)}
                          role={"img"}
                        />
                      }
                      link={`/product/why-choose-chipsia`}
                      showEndIcon={true}
                      submitsForm={true}
                    >
                      {" more"}
                    </Button>
                  </div>
                ),
                value: args.container42
              })}
            </div>
            <div
              data-plasmic-name={"container5"}
              data-plasmic-override={overrides.container5}
              className={classNames(projectcss.all, sty.container5)}
            />
          </section>
          <section className={classNames(projectcss.all, sty.section___4Edrn)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container433"}
              data-plasmic-override={overrides.container433}
              hasGap={true}
              className={classNames(projectcss.all, sty.container433)}
            >
              <div className={classNames(projectcss.all, sty.column__dr63P)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__nU39R
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__o4Z6V)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__hKjh)}
                  icon={
                    <MedalIcon
                      className={classNames(projectcss.all, sty.svg__wRx9Y)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nYvD
                    )}
                  >
                    {"We guarantee everything we sell."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w0VlR
                    )}
                  >
                    {
                      "Every product we sell, tempeh chips, banana chips, cassava chips, and emping chips also other products, are made from fresh ingredients with legacy recipes. so you will be satisfied with the product you received"
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__ubR3H)}
                    colors={"link" as const}
                    submitsForm={true}
                  >
                    {"View guarantee"}
                  </Button>
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column___4KxpV)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__k61Pr
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__nAdGm)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__hjbx)}
                  icon={
                    <LeafIcon
                      className={classNames(projectcss.all, sty.svg__rfGNe)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hWlrg
                    )}
                  >
                    {"100 % organic and Plant based"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r70Cb
                    )}
                  >
                    {
                      "The market for our product is increasing rapidly in your country. Our chips Product made from fresh and natural plant-based ingredients, so it's healthy and can become an alternative for people who are vegetarian or just want to consume healthy but  tasty snacks"
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__cLrcT)}
                    colors={"link" as const}
                    submitsForm={true}
                  />
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__k8HnY)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__wvCoz
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__zcTFu)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__doBse)}
                  icon={
                    <MoneySvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__zIxt)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___752R8
                    )}
                  >
                    {"Reap High Profit by becoming importer"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kwcpJ
                    )}
                  >
                    {
                      "Our product is in high demand for the export market, now it's your turn to reap high profit by becoming an importer of our products such as tempeh chips, banana chips, emping chips, and cassava chips in your country "
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__e7EKb)}
                    colors={"link" as const}
                    submitsForm={true}
                  />
                </Value>
              </div>
              <div className={classNames(projectcss.all, sty.column__qu8U)}>
                <Value
                  center={true}
                  children2={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__n95Sq
                      )}
                      colors={"black" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__oOiB)}
                          role={"img"}
                        />
                      }
                      rounded={true}
                      size={"large" as const}
                      submitsForm={true}
                    >
                      {"Read our letter"}
                    </Button>
                  }
                  className={classNames("__wab_instance", sty.value__rBw1F)}
                  icon={
                    <PeaceIcon
                      className={classNames(projectcss.all, sty.svg___9Lkgb)}
                      role={"img"}
                    />
                  }
                  topBottom={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rnZIz
                    )}
                  >
                    {"We give back for every sale."}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hiExd
                    )}
                  >
                    {
                      "we give back to our people. By Importing from us you also contribute to local communities of traditional Indonesian food producers, because we only produce our product by empowering local Indonesian people"
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__y6SVt)}
                    colors={"link" as const}
                    submitsForm={true}
                  />
                </Value>
              </div>
            </p.Stack>
          </section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </main>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageMetadataOverride",
    "navBar",
    "container4",
    "productNameH1",
    "slider",
    "freeBox",
    "descriptionH2Header",
    "ingredientH2",
    "ingredientsimage",
    "makingProcessesH2",
    "container",
    "productCard",
    "productCard2",
    "ul",
    "container42",
    "container5",
    "container433",
    "footer"
  ],
  pageMetadataOverride: ["pageMetadataOverride"],
  navBar: ["navBar"],
  container4: [
    "container4",
    "productNameH1",
    "slider",
    "freeBox",
    "descriptionH2Header",
    "ingredientH2",
    "ingredientsimage",
    "makingProcessesH2"
  ],
  productNameH1: ["productNameH1"],
  slider: ["slider", "freeBox"],
  freeBox: ["freeBox"],
  descriptionH2Header: ["descriptionH2Header"],
  ingredientH2: ["ingredientH2"],
  ingredientsimage: ["ingredientsimage"],
  makingProcessesH2: ["makingProcessesH2"],
  container: ["container", "productCard", "productCard2", "ul"],
  productCard: ["productCard"],
  productCard2: ["productCard2"],
  ul: ["ul"],
  container42: ["container42"],
  container5: ["container5"],
  container433: ["container433"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "main";
  pageMetadataOverride: typeof PlasmicHead;
  navBar: typeof NavBar;
  container4: "div";
  productNameH1: "h1";
  slider: typeof Slider;
  freeBox: "div";
  descriptionH2Header: "h2";
  ingredientH2: "h2";
  ingredientsimage: typeof p.PlasmicImg;
  makingProcessesH2: "h2";
  container: "div";
  productCard: typeof ProductCard;
  productCard2: typeof ProductCard;
  ul: "ul";
  container42: "div";
  container5: "div";
  container433: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductitem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductitem__VariantsArgs;
    args?: PlasmicProductitem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductitem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductitem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductitem__ArgProps,
          internalVariantPropNames: PlasmicProductitem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductitem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductitem";
  } else {
    func.displayName = `PlasmicProductitem.${nodeName}`;
  }
  return func;
}

export const PlasmicProductitem = Object.assign(
  // Top-level PlasmicProductitem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),
    navBar: makeNodeComponent("navBar"),
    container4: makeNodeComponent("container4"),
    productNameH1: makeNodeComponent("productNameH1"),
    slider: makeNodeComponent("slider"),
    freeBox: makeNodeComponent("freeBox"),
    descriptionH2Header: makeNodeComponent("descriptionH2Header"),
    ingredientH2: makeNodeComponent("ingredientH2"),
    ingredientsimage: makeNodeComponent("ingredientsimage"),
    makingProcessesH2: makeNodeComponent("makingProcessesH2"),
    container: makeNodeComponent("container"),
    productCard: makeNodeComponent("productCard"),
    productCard2: makeNodeComponent("productCard2"),
    ul: makeNodeComponent("ul"),
    container42: makeNodeComponent("container42"),
    container5: makeNodeComponent("container5"),
    container433: makeNodeComponent("container433"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicProductitem
    internalVariantProps: PlasmicProductitem__VariantProps,
    internalArgProps: PlasmicProductitem__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description:
        "Detail of our products Tempeh Chips, Banana Chips, Cassava Chips, Emping Chips and Tofu Chips ready for import to your country with High Quality, Lowest Price",
      ogImageSrc:
        "https://site-assets.plasmic.app/54f3ce18d37d548646a3665708ddddc8.jpg",
      canonical: "https://chipsia.com"
    }
  }
);

export default PlasmicProductitem;
/* prettier-ignore-end */
