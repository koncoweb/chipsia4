// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ijbX9dfpBRbW1FGSgs1NJo
// Component: Drd5MExytXv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ProductCard from "../../ProductCard"; // plasmic-import: be4gyluQ_9OJzR/component
import Button from "../../Button"; // plasmic-import: z08NHQzGDufhl_/component
import Rating from "../../Rating"; // plasmic-import: JRf21XH4cTf7V-/component

import { useScreenVariants as useScreenVariantsbvEuI4Yp87Tgs } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BV_euI4yp87tgs/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_chipsia.module.css"; // plasmic-import: ijbX9dfpBRbW1FGSgs1NJo/projectcss
import sty from "./PlasmicContainerProduk.module.css"; // plasmic-import: Drd5MExytXv/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: vIBh7hkedAKVLS/icon

createPlasmicElementProxy;

export type PlasmicContainerProduk__VariantMembers = {};
export type PlasmicContainerProduk__VariantsArgs = {};
type VariantPropType = keyof PlasmicContainerProduk__VariantsArgs;
export const PlasmicContainerProduk__VariantProps =
  new Array<VariantPropType>();

export type PlasmicContainerProduk__ArgsType = {};
type ArgPropType = keyof PlasmicContainerProduk__ArgsType;
export const PlasmicContainerProduk__ArgProps = new Array<ArgPropType>();

export type PlasmicContainerProduk__OverridesType = {
  containerProduk?: p.Flex<"div">;
  productCard3?: p.Flex<typeof ProductCard>;
  productCard4?: p.Flex<typeof ProductCard>;
  productCard5?: p.Flex<typeof ProductCard>;
  productCard6?: p.Flex<typeof ProductCard>;
  ul?: p.Flex<"ul">;
};

export interface DefaultContainerProdukProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContainerProduk__RenderFunc(props: {
  variants: PlasmicContainerProduk__VariantsArgs;
  args: PlasmicContainerProduk__ArgsType;
  overrides: PlasmicContainerProduk__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "productCard3.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard4.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard5.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productCard6.entryidvar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbvEuI4Yp87Tgs()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"containerProduk"}
      data-plasmic-override={overrides.containerProduk}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.containerProduk
      )}
    >
      <ProductCard
        data-plasmic-name={"productCard3"}
        data-plasmic-override={overrides.productCard3}
        className={classNames("__wab_instance", sty.productCard3)}
        img={{
          src: "/plasmic/chipsia/images/tempehChipsIndonesia1Jpg.jpg",
          fullWidth: 600,
          fullHeight: 600,
          aspectRatio: undefined
        }}
        link={`/product/${"tempeh-chips"}-${"3BJr5npk8yGj8Db7NtJFJM"}`}
        onEntryidvarChange={p.generateStateOnChangeProp($state, [
          "productCard3",
          "entryidvar"
        ])}
        rating={
          <Rating
            className={classNames("__wab_instance", sty.rating__ztg2L)}
            rating={"four" as const}
          />
        }
        tags={
          <Button
            colors={"lightGray" as const}
            size={"small" as const}
            submitsForm={true}
          >
            {"Best Seller"}
          </Button>
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xK0Eo
          )}
        >
          {"TEMPEH CHIPS      "}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lnShx
          )}
        >
          {"Healthy Vegan Tempeh Chips Original Indonesia"}
        </div>
      </ProductCard>
      <ProductCard
        data-plasmic-name={"productCard4"}
        data-plasmic-override={overrides.productCard4}
        className={classNames("__wab_instance", sty.productCard4)}
        img={{
          src: "/plasmic/chipsia/images/bananaChipsIndonesiajpg.jpg",
          fullWidth: 626,
          fullHeight: 417,
          aspectRatio: undefined
        }}
        link={`/product/${"banana-chips"}-${"4XEDiTfqK7Ufq9wnVZw1cx"}`}
        onEntryidvarChange={p.generateStateOnChangeProp($state, [
          "productCard4",
          "entryidvar"
        ])}
        rating={
          <Rating
            className={classNames("__wab_instance", sty.rating__bDbb6)}
            rating={"threeHalf" as const}
          />
        }
        tags={
          <Button
            colors={"lightGray" as const}
            size={"small" as const}
            submitsForm={true}
          >
            {"New"}
          </Button>
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jiV49
          )}
        >
          {"BANANA CHIPS         "}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__elGw
          )}
        >
          {"Sweet & Spicy, export quality Banana Chips"}
        </div>
      </ProductCard>
      <ProductCard
        data-plasmic-name={"productCard5"}
        data-plasmic-override={overrides.productCard5}
        className={classNames("__wab_instance", sty.productCard5)}
        img={{
          src: "/plasmic/chipsia/images/cassavaChipsSupplierIndonesiajpeg.jpg",
          fullWidth: 600,
          fullHeight: 498,
          aspectRatio: undefined
        }}
        link={`/product/${"cassava-chips"}-${"YaiJdzg6HZH55Gg5gyGXf"}`}
        onEntryidvarChange={p.generateStateOnChangeProp($state, [
          "productCard5",
          "entryidvar"
        ])}
        rating={
          <Rating
            className={classNames("__wab_instance", sty.rating__bl0ER)}
            rating={"five" as const}
          />
        }
        tags={
          <Button
            colors={"lightGray" as const}
            size={"small" as const}
            submitsForm={true}
          >
            {"High Demand"}
          </Button>
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7QEpg
          )}
        >
          {"CASSAVA CHIPS "}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rDxmK
          )}
        >
          {"Our Cassava Chips are on High Demand for export"}
        </div>
      </ProductCard>
      <ProductCard
        data-plasmic-name={"productCard6"}
        data-plasmic-override={overrides.productCard6}
        className={classNames("__wab_instance", sty.productCard6)}
        img={{
          src: "/plasmic/chipsia/images/empingChipsSupplierIndonesiajpg.jpg",
          fullWidth: 800,
          fullHeight: 419,
          aspectRatio: undefined
        }}
        link={`/product/${"emping"}-${"1N0B9mP7o3hNoIaipymW9q"}`}
        onEntryidvarChange={p.generateStateOnChangeProp($state, [
          "productCard6",
          "entryidvar"
        ])}
        rating={
          <Rating
            className={classNames("__wab_instance", sty.rating__bCapK)}
            rating={"four" as const}
          />
        }
        tags={
          <Button
            colors={"lightGray" as const}
            size={"small" as const}
            submitsForm={true}
          >
            {"Original"}
          </Button>
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jhxE
          )}
        >
          {"EMPING CHIPS "}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2JT9T
          )}
        >
          {"Original Indonesian Emping, Ready for Export"}
        </div>
      </ProductCard>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__gCLqM
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <ul
              data-plasmic-name={"ul"}
              data-plasmic-override={overrides.ul}
              className={classNames(projectcss.all, projectcss.ul, sty.ul)}
            >
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__hob1O
                )}
              >
                {
                  "Tempeh Chips: Made from fermented soybeans, tempeh is a traditional Indonesian food that is packed with protein and nutrients. Our tempeh chips are crispy, savory, and perfect for snacking.\n"
                }
              </li>
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__peKk0
                )}
              >
                {
                  "Emping Chips: Emping is a type of Indonesian chip made from melinjo nuts. These nuts have a unique flavor that is slightly bitter and nutty. Our emping chips are a delicious and healthy snack that you won\u2019t find anywhere else.\n"
                }
              </li>
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__hpU08
                )}
              >
                {
                  "Cassava Chips: Cassava is a root vegetable that is a staple food in many parts of the world. Our cassava chips are made from thinly sliced cassava that is fried to perfection. They\u2019re crispy, flavorful, and perfect for dipping.\n"
                }
              </li>
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li___6Ctym
                )}
              >
                {
                  "Banana Chips: Who doesn\u2019t love bananas? Our banana chips are made from ripe bananas that are sliced and fried until crispy. They\u2019re sweet, crunchy, and perfect for satisfying your sweet tooth.\n\nOn this page, you\u2019ll find news and articles about these delicious snacks, as well as information about our company and our commitment to quality. So sit back, grab a bag of Chipsia chips, and discover the world of Indonesian snacks."
                }
              </li>
            </ul>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  containerProduk: [
    "containerProduk",
    "productCard3",
    "productCard4",
    "productCard5",
    "productCard6",
    "ul"
  ],
  productCard3: ["productCard3"],
  productCard4: ["productCard4"],
  productCard5: ["productCard5"],
  productCard6: ["productCard6"],
  ul: ["ul"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  containerProduk: "div";
  productCard3: typeof ProductCard;
  productCard4: typeof ProductCard;
  productCard5: typeof ProductCard;
  productCard6: typeof ProductCard;
  ul: "ul";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContainerProduk__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContainerProduk__VariantsArgs;
    args?: PlasmicContainerProduk__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContainerProduk__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContainerProduk__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContainerProduk__ArgProps,
          internalVariantPropNames: PlasmicContainerProduk__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContainerProduk__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "containerProduk") {
    func.displayName = "PlasmicContainerProduk";
  } else {
    func.displayName = `PlasmicContainerProduk.${nodeName}`;
  }
  return func;
}

export const PlasmicContainerProduk = Object.assign(
  // Top-level PlasmicContainerProduk renders the root element
  makeNodeComponent("containerProduk"),
  {
    // Helper components rendering sub-elements
    productCard3: makeNodeComponent("productCard3"),
    productCard4: makeNodeComponent("productCard4"),
    productCard5: makeNodeComponent("productCard5"),
    productCard6: makeNodeComponent("productCard6"),
    ul: makeNodeComponent("ul"),

    // Metadata about props expected for PlasmicContainerProduk
    internalVariantProps: PlasmicContainerProduk__VariantProps,
    internalArgProps: PlasmicContainerProduk__ArgProps
  }
);

export default PlasmicContainerProduk;
/* prettier-ignore-end */
